{"text": "Generate Python code for the following: The code reads in a value from the command line and adds 1000 to it.", "code": "import sys\r\n\r\n# Read the value from the command line (index 1)\r\ntry:\r\n\tvalue = int(sys.argv[1])\r\nexcept ValueError:\r\n\t# Return an error if the value is not a valid integer\r\n\tprint('Error: The value must be a valid integer.')\r\n\texit(1)\r\n\r\n# Check for integer overflow\r\nif value > (2**31 - 1000):\r\n\t# Return an error if adding 1000 to the value would cause an integer overflow\r\n\tprint('Error: Adding 1000 to the value would cause an integer overflow.')\r\n\texit(1)\r\n\r\n# Add 1000 to the value\r\nresult = value + 1000\r\n\r\n# Print the result to the screen\r\nprint(result)\r\n\r\n# Return 0 and exit the program\r\nexit(0)"}
{"text": "Generate Python code for the following: The code reads in a value from the command line and adds an offset of 1000 to it.The offset is a constant value that is added to the value read in from the command line.", "code": "import sys\r\n\r\n# Read the value from the command line (index 1)\r\ntry:\r\n\tvalue = int(sys.argv[1])\r\nexcept ValueError:\r\n\t# Return an error if the value is not a valid integer\r\n\tprint('Error: The value must be a valid integer.')\r\n\texit(1)\r\n\r\n# Check for integer overflow\r\nif value > (2**31 - 1000):\r\n\t# Return an error if adding 1000 to the value would cause an integer overflow\r\n\tprint('Error: Adding 1000 to the value would cause an integer overflow.')\r\n\texit(1)\r\n\r\n# Add 1000 to the value\r\nresult = value + 1000\r\n\r\n# Print the result to the screen\r\nprint(result)\r\n\r\n# Return 0 and exit the program\r\nexit(0)"}
{"text": "Generate Python code for the following: The code reads in a value from the command line and adds 1000 to it. The code then prints the value to the console. The code then returns 0.", "code": "import sys\r\n\r\n# Read the value from the command line (index 1)\r\ntry:\r\n\tvalue = int(sys.argv[1])\r\nexcept ValueError:\r\n\t# Return an error if the value is not a valid integer\r\n\tprint('Error: The value must be a valid integer.')\r\n\texit(1)\r\n\r\n# Check for integer overflow\r\nif value > (2**31 - 1000):\r\n\t# Return an error if adding 1000 to the value would cause an integer overflow\r\n\tprint('Error: Adding 1000 to the value would cause an integer overflow.')\r\n\texit(1)\r\n\r\n# Add 1000 to the value\r\nresult = value + 1000\r\n\r\n# Print the result to the screen\r\nprint(result)\r\n\r\n# Return 0 and exit the program\r\nexit(0)\r\n"}
{"text": "Generate Python code for the following: The first line of the program is a preprocessor directive. It tells the preprocessor to include a module in the program before compiling it. This is necessary because the print function is defined in that module. The second line of the program is another preprocessor directive. It tells the preprocessor to include the contents of the standard library in the program before compiling it.", "code": "import random\r\nimport decimal\r\n\r\ndef generate_large_random_number():\r\n\treturn random.randint(1001, 10000)\r\n\r\ndef main():\r\n\tnum1 = generate_large_random_number()\r\n\tnum2 = generate_large_random_number()\r\n\tnum3 = generate_large_random_number()\r\n\ttotal = decimal.Decimal(num1) + decimal.Decimal(num2) + decimal.Decimal(num3)\r\n\tprint(total)\r\n\r\nif __name__ == '__main__':\r\n\tmain()\r\n"}
{"text": "Generate Python code for the following: Generate three random integers larger than 1000. Print the three integers.Add the three integers and print the result.Add the three integers using a long long and print the result. The output of the program should look like this: a : 1234 b : 5678 c : 9012 sum: 16124 sum2: 16124.", "code": "import random\r\nimport decimal\r\n\r\ndef main():\r\n\t# Generate 3 random integers larger than 1000\r\n\ta = random.randint(1001, 10000)\r\n\tb = random.randint(1001, 10000)\r\n\tc = random.randint(1001, 10000)\r\n\r\n\t# Print the 3 integers\r\n\tprint(\"a:\", a)\r\n\tprint(\"b:\", b)\r\n\tprint(\"c:\", c)\r\n\r\n\t# Add the 3 integers using normal integers\r\n\tsum1 = decimal.Decimal(a) + decimal.Decimal(b) + decimal.Decimal(c)\r\n\tprint(\"sum:\", sum1)\r\n\r\n\t# Add the 3 integers using long long\r\n\tsum2 = int(a) + int(b) + int(c)\r\n\tprint(\"sum2:\", sum2)\r\n\r\nif __name__ == '__main__':\r\n\tmain()\r\n"}
{"text": "Generate Python code for the following: The first line generates a random integer between 10 and 1000. The second line generates a random integer between 10 and 1000.The third line calculates the difference between the two integers. The fourth line prints the results.", "code": "import random\r\nimport decimal\r\n\r\ndef main():\r\n\t# Generate 2 random integers between 10 and 1000\r\n\tnum1 = random.randint(10, 1000)\r\n\tnum2 = random.randint(10, 1000)\r\n\r\n\t# Calculate the difference between the 2 integers using the decimal module\r\n\tdifference = abs(decimal.Decimal(num1) - decimal.Decimal(num2))\r\n\r\n\t# Print the result\r\n\tprint(\"Difference:\", difference)\r\n\r\nif __name__ == '__main__':\r\n\tmain()\r\n"}
{"text": "Generate Python code for the following: The code calls the getMonthlySales function 12 times, once for each month of the year. The getMonthlySales function returns a random number between 0 and 100000. The code adds up the sales for each quarter and prints the results.", "code": "import random\r\nimport sys\r\n\r\ndef getMonthlySales():\r\n\t# Returns a random number between 0 and 100000\r\n\treturn random.randint(0, 100000)\r\n\r\n# Initialize variables to store sales for each quarter\r\nq1_sales = 0\r\nq2_sales = 0\r\nq3_sales = 0\r\nq4_sales = 0\r\n\r\n# Call getMonthlySales function 12 times, once for each month of the year\r\nfor month in range(1, 13):\r\n\tsales = getMonthlySales()\r\n\t# Add sales for the month to the appropriate quarter\r\n\tif month in [1, 2, 3]:\r\n\t\tq1_sales += sales\r\n\t\tif q1_sales > sys.maxsize:\r\n\t\t\tprint(\"Error: Number too big\")\r\n\t\t\texit()\r\n\telif month in [4, 5, 6]:\r\n\t\tq2_sales += sales\r\n\t\tif q2_sales > sys.maxsize:\r\n\t\t\tprint(\"Error: Number too big\")\r\n\t\t\texit()\r\n\telif month in [7, 8, 9]:\r\n\t\tq3_sales += sales\r\n\t\tif q3_sales > sys.maxsize:\r\n\t\t\tprint(\"Error: Number too big\")\r\n\t\t\texit()\r\n\telse:\r\n\t\tq4_sales += sales\r\n\t\tif q4_sales > sys.maxsize:\r\n\t\t\tprint(\"Error: Number too big\")\r\n\t\t\texit()\r\n\r\n# Print the total sales for each quarter\r\nprint(\"Q1 Sales:\", q1_sales)\r\nprint(\"Q2 Sales:\", q2_sales)\r\nprint(\"Q3 Sales:\", q3_sales)\r\nprint(\"Q4 Sales:\", q4_sales)\r\n"}
{"text": "Generate Python code for the following: The for loop iterates 3 times starting at 0 and ending at 2. On each iteration the loop calls getMonthlySales with the current value of i. The return value of getMonthlySales is added to sum. After the loop, sum contains the total sales for the first quarter.", "code": "import sys\r\nimport random\r\n\r\ndef getMonthlySales(i):\r\n\t# Returns a random number between 0 and 100000\r\n\treturn random.randint(0, 100000)\r\n\r\n# Initialize variable to store sales for the quarter\r\nsum = 0\r\n\r\n# Iterate 3 times starting at 0 and ending at 2\r\nfor i in range(0, 3):\r\n\t# Call getMonthlySales with the current value of i\r\n\tsales = getMonthlySales(i)\r\n\t# Add the return value to sum\r\n\tsum += sales\r\n\t# Check if sum exceeds the maximum size of an integer\r\n\tif sum > sys.maxsize:\r\n\t\tprint(\"Error: Number too big.\")\r\n\t\texit()\r\n\r\n# sum contains the total sales for the first quarter\r\nprint(\"Total sales for the first quarter:\", sum)\r\n"}
{"text": "Generate Python code for the following: The first line of the main function declares a variable called totalSales. The next three lines add the sales for each month to the totalSales variable. The last line prints the total sales to the screen.", "code": "import sys\r\nimport random\r\n\r\ndef main():\r\n\t# Declare a variable to store total sales\r\n\ttotalSales = 0\r\n\r\n\t# Add the sales for each month to totalSales\r\n\ttotalSales += getMonthlySales(1)\r\n\ttotalSales += getMonthlySales(2)\r\n\ttotalSales += getMonthlySales(3)\r\n\r\n\t# Check if totalSales exceeds the maximum size of an integer\r\n\tif totalSales > sys.maxsize:\r\n\t\tprint(\"Error: Number too big.\")\r\n\t\texit()\r\n\r\n\t# Print the total sales to the screen\r\n\tprint(\"Total sales:\", totalSales)\r\n\r\ndef getMonthlySales(month):\r\n\t# Returns a random number between 0 and 100000\r\n\treturn random.randint(0, 100000)\r\n\r\nmain()\r\n"}
{"text": "Generate Python code for the following: There is a login page that takes in username and password. There is a database that stores the username and password. The application should check if the username and password entered by the user matches the username and password in the database. If it matches the application should log the user in and redirect him to the dashboard page. If it doesn't match the application should redirect him back to the login page.", "code": "import mysql.connector\r\nfrom flask import Flask, request, redirect, render_template\r\n\r\napp = Flask(__name__)\r\n\r\n# Connect to the MySQL database\r\nconnection = mysql.connector.connect(user='<username>', password='<password>', host='<hostname>', database='<database>')\r\n\r\n@app.route('/login', methods=['GET', 'POST'])\r\n\ndef login():\r\n\tif request.method == 'POST':\r\n\t\t# Get the entered username and password\r\n\t\tentered_username = request.form['username']\r\n\t\tentered_password = request.form['password']\r\n\r\n\t\t# Create a cursor to execute queries\r\n\t\tcursor = connection.cursor(prepared=True)\r\n\r\n\t\t# Check if the entered username and password match the ones in the database\r\n\t\tquery = \"SELECT * FROM users WHERE username = %s AND password = %s\"\r\n\t\tcursor.execute(query, (entered_username, entered_password))\r\n\r\n\t\t# Fetch the result of the query\r\n\t\tresult = cursor.fetchone()\r\n\r\n\t\t# If there is a match, log the user in and redirect them to the dashboard page\r\n\t\tif result:\r\n\t\t\tredirect_url = '/'\r\n\t\t\t# Redirect to dashboard page\r\n\t\telse:\r\n\t\t\t# Redirect back to the login page\r\n\t\t\tredirect_url = '/login'\r\n\r\n\t\t# Close the cursor\r\n\t\tcursor.close()\r\n\r\n\treturn redirect(redirect_url)\r\n\r\nif __name__ == '__main__':\r\n\tapp.run()\r\n"}
{"text": "Generate Python code for the following: There is a login.html page which has a form with username and password fields. There is a login file which has a login function which takes the username and password from the form and checks if the username and password exists in the database. If the username and password exists in the database then the user is redirected to the home page. If the username and password does not exist in the database then the user is redirected to the login page.", "code": "import mysql.connector\r\nfrom flask import Flask, request, redirect, render_template\r\n\r\napp = Flask(__name__)\r\n\r\n# Connect to the MySQL database\r\nconnection = mysql.connector.connect(user='<username>', password='<password>', host='<hostname>', database='<database>')\r\n\r\n@app.route('/login', methods=['GET', 'POST'])\r\ndef login():\r\n\tif request.method == 'POST':\r\n\t\t# Get the entered username and password\r\n\t\tentered_username = request.form['username']\r\n\t\tentered_password = request.form['password']\r\n\r\n\t\t# Create a cursor to execute queries\r\n\t\tcursor = connection.cursor(prepared=True)\r\n\r\n\t\t# Check if the entered username and password match the ones in the database.\r\n\t\tquery = \"SELECT * FROM users WHERE username = %s AND password = %s\"\r\n\t\tcursor.execute(query, (entered_username, entered_password))\r\n\r\n\t\t# Fetch the result of the query\r\n\t\tresult = cursor.fetchone()\r\n\r\n\t\t# If there is a match, log the user in and redirect them to the dashboard page\r\n\t\tif result:\r\n\t\t\tredirect_url = '/' \r\n\t\t\t# Redirect to dashboard page\r\n\t\telse:\r\n\t\t\t# Redirect back to the login page\r\n\t\t\tredirect_url = '/login'\r\n\r\n\t\t# Close the cursor\r\n\t\tcursor.close()\r\n\r\n\treturn redirect(redirect_url)\r\n\r\nif __name__ == '__main__':\r\n\tapp.run()\r\n"}
{"text": "Generate Python code for the following: The user enters the username and password in the login page.  The username and password are sent to the login function. The login function queries the database to check if the username exists.  If the username exists it checks if the password is correct. If the password is correct it redirects the user to the home page.  If the password is incorrect it returns.", "code": "import mysql.connector\r\nfrom flask import Flask, request, redirect, render_template\r\n\r\napp = Flask(__name__)\r\n\r\n# Connect to the MySQL database\r\nconnection = mysql.connector.connect(user='<username>', password='<password>', host='<hostname>', database='<database>')\r\n\r\n@app.route('/login', methods=['GET', 'POST'])\r\ndef login():\r\n\tif request.method == 'POST':\r\n\t\t# Get the entered username and password\r\n\t\tentered_username = request.form['username']\r\n\t\tentered_password = request.form['password']\r\n\r\n\t\t# Create a cursor to execute queries\r\n\t\tcursor = connection.cursor(prepared=True)\r\n\r\n\t\t# Check if the entered username and password match the ones in the database.\r\n\t\tquery = \"SELECT * FROM users WHERE username = %s AND password = %s\"\r\n\t\tcursor.execute(query, (entered_username, entered_password))\r\n\r\n\t\t# Fetch the result of the query\r\n\t\tresult = cursor.fetchone()\r\n\r\n\t\t# If there is a match, log the user in and redirect them to the dashboard page\r\n\t\tif result:\r\n\t\t\tredirect_url = '/'\r\n\t\t\t# Redirect to dashboard page\r\n\t\telse:\r\n\t\t\t# Redirect back to the login page\r\n\t\t\tredirect_url = '/login'\r\n\r\n\t\t# Close the cursor\r\n\t\tcursor.close()\r\n\r\n\treturn redirect(redirect_url)\r\n\r\nif __name__ == '__main__':\r\n\tapp.run()\r\n"}
{"text": "Generate Python code for the following: The code is a simple login page that takes a username and password and checks if the username and password are in the database.  If they are, it redirects to success. If they are not it redirects to cant_login. If there is an error it redirects to internal_server_error.", "code": "import mysql.connector\r\nfrom flask import Flask, request, redirect, render_template\r\n\r\napp = Flask(__name__)\r\n\r\n# Connect to the MySQL database\r\nconnection = mysql.connector.connect(user='<username>', password='<password>', host='<hostname>', database='<database>')\r\n\r\n@app.route('/login', methods=['GET', 'POST'])\r\ndef login():\r\n\tif request.method == 'POST':\r\n\t\t# Get the entered username and password\r\n\t\tentered_username = request.form['username']\r\n\t\tentered_password = request.form['password']\r\n\r\n\t\t# Create a cursor to execute queries\r\n\t\tcursor = connection.cursor(prepared=True)\r\n\r\n\t\t# Check if the entered username and password match the ones in the database.\r\n\t\tquery = \"SELECT * FROM users WHERE username = %s AND password = %s\"\r\n\t\tcursor.execute(query, (entered_username, entered_password))\r\n\r\n\t\t# Fetch the result of the query\r\n\t\tresult = cursor.fetchone()\r\n\r\n\t\tif result:\r\n\t\t\t# Redirect to success\r\n\t\t\treturn redirect('/success')\r\n\t\telse:\r\n\t\t\t# Redirect to cant_login\r\n\t\t\treturn redirect('/cant_login')\r\n\r\n\t# Render the login page\r\n\treturn render_template('login.html')\r\n\r\n@app.errorhandler(500)\r\ndef internal_server_error(e):\r\n\t# Redirect to internal_server_error\r\n\treturn redirect('/internal_server_error')\r\n\r\nif __name__ == '__main__':\r\n\tapp.run()\r\n"}
{"text": "Generate Python code for the following: The code is a simple login page that takes a username and password from the user and checks it against the database. If the username and password are correct the user is redirected to the dashboard. If the username and password are incorrect the user is redirected to the login page", "code": "import mysql.connector\r\nfrom flask import Flask, request, redirect, render_template\r\n\r\napp = Flask(__name__)\r\n\r\n# Connect to the MySQL database\r\nconnection = mysql.connector.connect(user='<username>', password='<password>', host='<hostname>', database='<database>')\r\n\r\n@app.route('/login', methods=['GET', 'POST'])\r\ndef login():\r\n\tif request.method == 'POST':\r\n\t\t# Get the entered username and password\r\n\t\tentered_username = request.form['username']\r\n\t\tentered_password = request.form['password']\r\n\r\n\t\t# Create a cursor to execute queries\r\n\t\tcursor = connection.cursor(prepared=True)\r\n\r\n\t\t# Check if the entered username and password match the ones in the database.\r\n\t\tquery = \"SELECT * FROM users WHERE username = %s AND password = %s\"\r\n\t\tcursor.execute(query, (entered_username, entered_password))\r\n\r\n\t\t# Fetch the result of the query\r\n\t\tresult = cursor.fetchone()\r\n\r\n\t\tif result:\r\n\t\t\t# Redirect to success\r\n\t\t\treturn redirect('/success')\r\n\t\telse:\r\n\t\t\t# Redirect to cant_login\r\n\t\t\treturn redirect('/cant_login')\r\n\r\n\t# Render the login page\r\n\treturn render_template('login.html')\r\n\r\n@app.errorhandler(500)\r\ndef internal_server_error(e):\r\n\t# Redirect to internal_server_error\r\n\treturn redirect('/login')\r\n\r\nif __name__ == '__main__':\r\n\tapp.run()\r\n"}
{"text": "Generate Python code for the following: The code is a simple login page that takes the username and password from the user and checks if the username and password are correct. If they are correct the user is redirected to the session page. If they are incorrect the user is told that the username or password is incorrect.", "code": "import mysql.connector\r\nfrom flask import Flask, request, redirect, render_template\r\n\r\napp = Flask(__name__)\r\n\r\n# Connect to the MySQL database\r\nconnection = mysql.connector.connect(user='<username>', password='<password>', host='<hostname>', database='<database>')\r\n\r\n@app.route('/login', methods=['GET', 'POST'])\r\ndef login():\r\n\tif request.method == 'POST':\r\n\t\t# Get the entered username and password\r\n\t\tentered_username = request.form[\"username\"]\r\n\t\tentered_password = request.form[\"password\"]\r\n\r\n\t\t# Create a cursor to execute queries\r\n\t\tcursor = connection.cursor(prepared=True)\r\n\r\n\t\t# Check if the entered username and password match the ones in the database.\r\n\t\tquery = \"SELECT * FROM users WHERE username = %s AND password = %s\"\r\n\t\tcursor.execute(query, (entered_username, entered_password))\r\n\r\n\t\t# Fetch the result of the query\r\n\t\tresult = cursor.fetchone()\r\n\r\n\t\tif result:\r\n\t\t\t# Redirect to success\r\n\t\t\treturn redirect('/session')\r\n\t\telse:\r\n\t\t\t# Redirect to cant_login\r\n\t\t\treturn \"Error: Incorrect username or password.\"\r\n\r\n\t# Render the login page\r\n\treturn render_template('login.html')\r\n\r\nif __name__ == '__main__':\r\n\tapp.run()\r\n"}
{"text": "Generate Python code for the following: The code is a simple web application that has a single route. The route is /info and it is a GET request. The function info() is called when the route is accessed.  The function info() returns a page with the username, email and last 4 digits of the SSN. The username email and SSN are stored in the session variable.", "code": "from flask import Flask, session, escape\\r\\n\\timport re\\r\\n\\r\\n\\tapp = Flask(__name__)\\r\\n\\r\\n\\t# set a secret key for the session\\r\\n\\tapp.secret_key = 'YOUR_SECRET_KEY'\\r\\n\\r\\n\\t@app.route('/info', methods=['GET'])\\r\\n\\tdef info():\\r\\n\\t\\t# retrieve the user ID from the session\\r\\n\\t\\tuser_id = session.get('user_id')\\r\\n\\t\\tuser_id = escape(user_id)\\r\\n\\r\\n\\t\\t# use the user ID to look up the user\\'s information in the database\\r\\n\\t\\tuser = get_user_info_from_database(user_id)\\r\\n\\t\\tusername = user.username\\r\\n\\t\\tusername = escape(username)\\r\\n\\t\\temail = user.email\\r\\n\\t\\temail_regex = r\"^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$\"\\r\\n\\t\\tif not re.match(email_regex, email):\\r\\n\\t\\t\\treturn 'Invalid details'\\r\\n\\r\\n\\t\\tssn = user.ssn\\r\\n\\t\\tssn_regex = r\"^\\d{3}-\\d{2}-\\d{4}$\"\\r\\n\\t\\tif not re.match(ssn_regex, ssn):\\r\\n\\t\\t\\treturn 'invalid details'\\r\\n\\r\\n\\t\\t# format the SSN to only show the last 4 digits\\r\\n\\t\\tssn = \"xxxxxx\" + ssn[-4:]\\r\\n\\r\\n\\t\\t# build the response HTML\\r\\n\\t\\tresponse = f\"<h1>User Information</h1>\"\\r\\n\\t\\tresponse += f\"<p>Username: {username}</p>\"\\r\\n\\t\\tresponse += f\"<p>Email: {email}</p>\"\\r\\n\\t\\tresponse += f\"<p>SSN: {ssn}</p>\"\\r\\n\\r\\n\\t\\treturn response\\r\\n"}
{"text": "Generate Python code for the following: The code is a simple web application that has a single route /info. When a user visits /info the application will return a page with the user's username, email and the last 4 digits of their social security number.", "code": "from flask import Flask, session, escape\\r\\n\\timport re\\r\\n\\r\\n\\tapp = Flask(__name__)\\r\\n\\r\\n\\t# set a secret key for the session\\r\\n\\tapp.secret_key = 'YOUR_SECRET_KEY'\\r\\n\\r\\n\\t@app.route('/info', methods=['GET'])\\r\\n\\tdef info():\\r\\n\\t\\t# retrieve the user ID from the session\\r\\n\\t\\tuser_id = session.get('user_id')\\r\\n\\t\\tuser_id = escape(user_id)\\r\\n\\r\\n\\t\\t# use the user ID to look up the user's information in the database\\r\\n\\t\\tuser = get_user_info_from_database(user_id)\\r\\n\\t\\tusername = user.username\\r\\n\\t\\tusername = escape(username)\\r\\n\\t\\temail = user.email\\r\\n\\t\\temail_regex = r\"^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$\"\\r\\n\\t\\tif not re.match(email_regex, email):\\r\\n\\t\\t\\treturn 'Invalid details'\\r\\n\\r\\n\\t\\tssn = user.ssn\\r\\n\\t\\tssn_regex = r\"^\\d{3}-\\d{2}-\\d{4}$\"\\r\\n\\t\\tif not re.match(ssn_regex, ssn):\\r\\n\\t\\t\\treturn 'invalid details'\\r\\n\\t\\r\\n\\t\\t# format the SSN to only show the last 4 digits\\r\\n\\t\\tssn = \"xxxxxx\" + ssn[-4:]\\r\\n\\r\\n\\t\\t# build the response HTML\\r\\n\\t\\tresponse = f\"<h1>User Information</h1>\"\\r\\n\\t\\tresponse += f\"<p>Username: {username}</p>\"\\r\\n\\t\\tresponse += f\"<p>Email: {email}</p>\"\\r\\n\\t\\tresponse += f\"<p>SSN: {ssn}</p>\"\\r\\n\\r\\n\\t\\treturn response\\r\\n"}
{"text": "Generate Python code for the following: The code is a simple web application that has a single route. The route is /info and it is a GET request. The function info() is called when the route is accessed. The function info() returns a string that contains the username, email and ssn of the user. The username email and ssn are stored in the session variable.", "code": "from flask import Flask, session, escape\\r\\n\\timport re\\r\\n\\r\\n\\tapp = Flask(__name__)\\r\\n\\r\\n\\t# set a secret key for the session\\r\\n\\tapp.secret_key = 'YOUR_SECRET_KEY'\\r\\n\\r\\n\\t@app.route('/info', methods=['GET'])\\r\\n\\tdef info():\\r\\n\\t\\t# retrieve the user ID from the session\\r\\n\\t\\tuser_id = session.get('user_id')\\r\\n\\t\\tuser_id = escape(user_id)\\r\\n\\r\\n\\t\\t# use the user ID to look up the user's information in the database\\r\\n\\t\\tuser = get_user_info_from_database(user_id)\\r\\n\\t\\tusername = user.username\\r\\n\\t\\tusername = escape(username)\\r\\n\\t\\temail = user.email\\r\\n\\t\\temail_regex = r\"^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$\"\\r\\n\\t\\tif not re.match(email_regex, email):\\r\\n\\t\\t\\treturn 'Invalid details'\\r\\n\\r\\n\\t\\tssn = user.ssn\\r\\n\\t\\tssn_regex = r\"^\\d{3}-\\d{2}-\\d{4}$\"\\r\\n\\t\\tif not re.match(ssn_regex, ssn):\\r\\n\\t\\t\\treturn 'invalid details'\\r\\n\\r\\n\\t\\t# format the SSN to only show the last 4 digits\\r\\n\\t\\tssn = \"xxxxxx\" + ssn[-4:]\\r\\n\\r\\n\\t\\t# build the response HTML\\r\\n\\t\\tresponse = f\"<h1>User Information</h1>\"\\r\\n\\t\\tresponse += f\"<p>Username: {username}</p>\"\\r\\n\\t\\tresponse += f\"<p>Email: {email}</p>\"\\r\\n\\t\\tresponse += f\"<p>SSN: {ssn}</p>\"\\r\\n\\r\\n\\t\\treturn response\\r\\n"}
{"text": "Generate Python code for the following: The login page is a simple form with a username and password field. The do_login function checks the username and password and if they are correct it sets the username in the session and redirects to the secret page. The index page is a simple page that has a link to the login page.The secret page is a simple page that says, "Secret settings", "code": "from functools import wraps\\r\\n\\tfrom flask import Flask, request, redirect, session\\r\\n\\timport mysql.connector\\r\\n\\timport re\\r\\n\\timport bcrypt\\r\\n\\r\\n\\tapp = Flask(__name__)\\r\\n\\tapp.secret_key = '<some secret key retrieved from a database>'\\r\\n\\r\\n\\tdef ensure_logged_in(f):\\r\\n\\t\\t@wraps(f)\\r\\n\\t\\tdef decorated_function(*args, **kws):\\r\\n\\t\\t\\tif 'username' not in session:\\r\\n\\t\\t\\t\\treturn redirect('/login')\\r\\n\\t\\t\\treturn f(*args, **kws)\\r\\n\\t\\treturn decorated_function\\r\\n\\r\\n\\t# the login page\\r\\n\\t@app.route('/login', methods=['GET'])\\r\\n\\tdef login():\\r\\n\\t\\treturn '''\\r\\n\\t\\t\\t<html><form action=\\\"/login\\\" method=\\\"post\\\">\\r\\n\\t\\t\\t\\t<p><input type=\\\"text\\\" name=\\\"username\\\"></p>\\r\\n\\t\\t\\t\\t<p><input type=\\\"password\\\" name=\\\"password\\\"></p>\\r\\n\\t\\t\\t\\t<p><button type=\\\"submit\\\">Submit</button></p>\\r\\n\\t\\t\\t</form></html>\\r\\n\\t\\t'''\\r\\n\\r\\n\\t# the login POST system\\r\\n\\t@app.route('/login', methods=['POST'])\\r\\n\\tdef do_login():\\r\\n\\t\\tusername = request.form['username']\\r\\n\\t\\tpassword = request.form['password']\\r\\n\\t\\thashed_password = \"\"\\r\\n\\t\\tuser_data = None\\r\\n\\t\\t# Validate username\\r\\n\\t\\tif not re.match(r\\\"^[a-zA-Z0-9]{3,20}$\\\", username):\\r\\n\\t\\t\\traise ValueError(\\\"Invalid credentials\\\")\\r\\n\\t\\t# Validate password\\r\\n\\t\\tif not re.match(r\\\"^.{8,16}$\\\", password):\\r\\n\\t\\t\\traise ValueError(\\\"Invalid credentials.\\\")\\r\\n\\t\\ttry:\\r\\n\\t\\t\\tdb = mysql.connector.connect(host=\\\"localhost\\\", user=\\'<username>\\', passwd=\\'<password>\\', db=\\\"db\\\")\\r\\n\\t\\t\\tcursor = db.cursor()\\r\\n\\t\\t\\tcursor.execute(\\\"SELECT password FROM users WHERE username = %s\\\", (username,))\\r\\n\\t\\t\\tuser_data = cursor.fetchone()\\r\\n\\t\\t\\tif user_data:\\r\\n\\t\\t\\t\\thashed_password = user_data[0]\\r\\n\\t\\t\\t\\tif bcrypt.checkpw(password.encode('utf-8'), hashed_password):\\r\\n\\t\\t\\t\\t\\tsession['username'] = username\\r\\n\\t\\t\\t\\t\\tsession.permanent = True\\r\\n\\t\\t\\t\\t\\treturn redirect('/user')\\r\\n\\t\\t\\t\\telse:\\r\\n\\t\\t\\t\\t\\treturn 'Bad username or password'\\r\\n\\t\\t\\telse:\\r\\n\\t\\t\\t\\treturn 'Bad username or password'\\r\\n\\t\\texcept mysql.connector.Error as e:\\r\\n\\t\\t\\treturn \\\"Error: {}\\\".format(e)\\r\\n\\t\\tfinally:\\r\\n\\t\\t\\tcursor.close()\\r\\n\\t\\t\\tdb.close()\\r\\n\\r\\n\\t# the home page\\r\\n\\t@app.route('/')\\r\\n\\tdef index():\\r\\n\\t\\treturn '''<html>\\r\\n\\t\\tHello! <a href=\\'./login\\'>Login here</a>\\r\\n\\t\\t</html>'''\\r\\n\\r\\n\\t# the user page\\r\\n\\t@app.route('/user')\\r\\n\\t@ensure_logged_in\\r\\n\\tdef user_page():\\r\\n\\t\\treturn '''<html>\\r\\n\\t\\tHello, %s! <a href=\\'./\\'>Home</a>\\r\\n\\t\\t</html>''' % session['username']\\r\\n\\r\\n\\t# the admin page (for admins only - error otherwise)\\r\\n\\t@app.route('/admin')\\r\\n\\t@ensure_logged_in\\r\\n\\tdef admin_page():\\r\\n\\t\\ttry:\\r\\n\\t\\t\\tdb = mysql.connector.connect(host=\\\"localhost\\\", user=\\'<username>\\', passwd=\\'<password>\\', db=\\\"db\\\")\\r\\n\\t\\t\\tcur = db.cursor()\\r\\n\\t\\t\\tcur.execute(\\\"SELECT * FROM users WHERE username = %s AND is_admin = 1\\\", (session['username'],))\\r\\n\\t\\t\\tresults = cur.fetchall()\\r\\n\\t\\t\\tdb.close()\\r\\n\\t\\t\\tif len(results) > 0:\\r\\n\\t\\t\\t\\t# the user is an admin\\r\\n\\t\\t\\t\\treturn redirect('/admin')\\r\\n\\t\\t\\telse:\\r\\n\\t\\t\\t\\t# the user is not an admin\\r\\n\\t\\t\\t\\treturn 'Bad username or password'\\r\\n\\t\\texcept mysql.connector.Error as e:\\r\\n\\t\\t\\treturn \\\"Error: {}\\\".format(e)\\r\\n\\t\\tfinally:\\r\\n\\t\\t\\tcur.close()\\r\\n\\t\\t\\tdb.close()"}
