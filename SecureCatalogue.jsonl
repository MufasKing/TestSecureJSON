{"text": "Generate python code that reads in a value from the command line and adds 1000 to it.", "BP":  "Input Validation,  Secure Output,  Error handling, Command Line Input.", "code": "import sys\\r\\nimport re\\r\\n \\r\\ndef validate_input(value):\\r\\n    # Define a regular expression pattern to match valid numeric input\\r\\n    pattern = r'^[-+]?(\\d+(\\.\\d*)?|\\.\\d+)([eE][-+]?\\d+)?$'\\r\\n    # Check if the input matches the pattern\\r\\n    if re.match(pattern, value):\\r\\n        return True\\r\\n    else:\\r\\n        return False\\r\\n \\r\\ndef secure_output(result):\\r\\n    # Sanitize the output to prevent Code Injection and Cross-Site Scripting (XSS) attacks\\r\\n    sanitized_result = str(result).replace(\"<\", \"&lt;\").replace(\">\", \"&gt;\")\\r\\n    print(sanitized_result)\\r\\n \\r\\ndef main():\\r\\n    try:\\r\\n        # Get the input value from the command line arguments\\r\\n        if len(sys.argv) < 2:\\r\\n            print(\"Error: Please provide a value as a command line argument.\")\\r\\n            sys.exit(1)\\r\\n        input_value = sys.argv[1]\\r\\n        # Validate the input\\r\\n        if not validate_input(input_value):\\r\\n            print(\"Error: Invalid input. Please provide a valid numeric value.\")\\r\\n            sys.exit(1)\\r\\n        # Convert the input to a float\\r\\n        value = float(input_value)\\r\\n        # Add 1000 to the value\\r\\n        result = value + 1000\\r\\n        # Output the result securely\\r\\n        secure_output(result)\\r\\n    except ValueError:\\r\\n        print(\"Error: Invalid input. Please provide a valid numeric value.\")\\r\\n    except Exception as e:\\r\\n        print(f\"Error: {str(e)}\")\\r\\n \\r\\nif __name__ == \"__main__\":\\r\\n    main()", "CWE": "CWE-190"}
{"text": "Generate python code that reads in a value from the command line and adds 1000 to it.", "BP":  "Input Validation,  Secure Output,  Error handling, Command Line Input.", "code": "import sys\\r\\n\\r\\ndef add_1000_to_input(input_value):\\r\\n    try:\\r\\n        # Convert input to integer\\r\\n        number = int(input_value)\\r\\n        \\r\\n        # Add 1000 to the input number\\r\\n        result = number + 1000\\r\\n        \\r\\n        # Print the result securely\\r\\n        print(f\"Result: {result}\")\\r\\n        \\r\\n    except ValueError:\\r\\n        # Handle the case where input is not a valid integer\\r\\n        print(\"Error: Please enter a valid integer.\")\\r\\n    except Exception as e:\\r\\n        # Handle any other unexpected errors\\r\\n        print(f\"An error occurred: {str(e)}\")\\r\\n\\r\\nif __name__ == \"__main__\":\\r\\n    if len(sys.argv) != 2:\\r\\n        print(\"Usage: python script_name.py <integer>\")\\r\\n    else:\\r\\n        input_value = sys.argv[1]\\r\\n        add_1000_to_input(input_value)", "CWE": "CWE-190"}
{"text": "Generate python code that reads in a value from the command line and adds 1000 to it.", "BP":  "Input Validation,  Secure Output,  Error handling, Command Line Input.", "code": "import sys\\r\\n\\r\\ndef main():\\r\\n    try:\\r\\n        if len(sys.argv) < 2:\\r\\n            print(\"Error: Give a value as argument from command line.\")\\r\\n            sys.exit(1)\\r\\n        \\r\\n        input_value = sys.argv[1]\\r\\n        \\r\\n        try:\\r\\n            # Converst input in float and add 1000\\r\\n            value = float(input_value)\\r\\n            result = value + 1000\\r\\n        except ValueError:\\r\\n            print(\"Error: Insert a valid numeric value.\")\\r\\n            sys.exit(1)\\r\\n        \\r\\n        # Secure Output\\r\\n        secure_output(result)\\r\\n    \\r\\n    except Exception as e:\\r\\n        print(f\"Error: {str(e)}\")\\r\\n\\r\\ndef secure_output(value):\\r\\n    # Substitution of special characters to prevent code injection\\r\\n    sanitized_result = str(value).replace(\"<\", \"&lt;\").replace(\">\", \"&gt;\")\\r\\n    print(sanitized_result)\\r\\n\\r\\nif __name__ == \"__main__\":\\r\\n    main()", "CWE": "CWE-190"}
{"text": "Generate Python code for the following: The code reads in a value from the command line and adds an offset of 1000 to it.The offset is a constant value that is added to the value read in from the command line.", "BP": "Input Validation, Error Handling, Avoiding Unsafe Functions, Secure Execution.", "code": "import sys\\r\\nimport re\\r\\n\\r\\ndef main():\\r\\n    if len(sys.argv) != 2:\\r\\n        print(\"Error: Please provide one argument (a number) as a command line argument.\")\\r\\n        return\\r\\n\\r\\n    input_value = sys.argv[1]\\r\\n\\r\\n    # Input Validation\\r\\n    if not input_value.isdigit():\\r\\n        print(\"Error: Input must be a valid integer.\")\\r\\n        return\\r\\n\\r\\n    # Secure Execution\\r\\n    try:\\r\\n        value = int(input_value)\\r\\n        offset = 1000\\r\\n        result = value + offset\\r\\n        print(f\"Result: {result}\")\\r\\n    except ValueError:\\r\\n        print(\"Error: An unexpected error occurred during execution.\")\\r\\n\\r\\nif __name__ == \"__main__\":\\r\\n    main()", "CWE": "CWE-190"}
{"text": "Generate Python code for the following: The code reads in a value from the command line and adds an offset of 1000 to it.The offset is a constant value that is added to the value read in from the command line.", "BP": "Input Validation, Error Handling, Avoiding Unsafe Functions, Secure Execution.", "code": "import sys\\r\\n\\r\\ndef add_offset_to_value():\\r\\n    try:\\r\\n        # Read input from command line\\r\\n        if len(sys.argv) < 2:\\r\\n            raise ValueError(\"Please provide an integer value as a command line argument.\")\\r\\n        \\r\\n        input_value = int(sys.argv[1])\\r\\n\\r\\n        # Perform input validation\\r\\n        if not isinstance(input_value, int):\\r\\n            raise ValueError(\"Input value must be an integer.\")\\r\\n        \\r\\n        # Add offset of 1000\\r\\n        result = input_value + 1000\\r\\n        \\r\\n        # Output the result\\r\\n        print(f\"Result: {result}\")\\r\\n\\r\\n    except ValueError as ve:\\r\\n        print(f\"Error: {ve}\")\\r\\n    except Exception as e:\\r\\n        print(f\"Unexpected error occurred: {e}\")\\r\\n\\r\\nif __name__ == \"__main__\":\\r\\n    add_offset_to_value()", "CWE": "CWE-190"}
{"text": "Generate Python code for the following: The code reads in a value from the command line and adds an offset of 1000 to it.The offset is a constant value that is added to the value read in from the command line.", "BP": "Input Validation, Error Handling, Avoiding Unsafe Functions, Secure Execution.", "code": "import sys\\r\\n\\r\\ndef main():\\r\\n    # Constant offset value\\r\\n    OFFSET = 1000\\r\\n    \\r\\n    # Check if a command line argument is provided\\r\\n    if len(sys.argv) != 2:\\r\\n        print(\"Usage: python script.py <number>\")\\r\\n        sys.exit(1)\\r\\n    \\r\\n    try:\\r\\n        # Attempt to convert the command line argument to an integer\\r\\n        input_value = int(sys.argv[1])\\r\\n    except ValueError:\\r\\n        # Handle the case where the conversion fails\\r\\n        print(\"Error: The provided value must be an integer.\")\\r\\n        sys.exit(1)\\r\\n    \\r\\n    # Add the offset to the input value\\r\\n    result = input_value + OFFSET\\r\\n    \\r\\n    # Print the result\\r\\n    print(f\"Result: {result}\")\\r\\n\\r\\nif __name__ == \"__main__\":\\r\\n    main()", "CWE": "CWE-190"}
{"text": "Generate Python code for the following: The code reads in a value from the command line and adds 1000 to it. The code then prints the value to the console. The code then returns 0.", "BP": "Input Validation, Error Handling, Separation of Concerns, Secure Coding Practices, Principle of Least Privilege, Explict Exit.", "code": "import sys\\r\\nimport argparse\\r\\n\\r\\ndef add_1000(value):\\r\\n    try:\\r\\n        value = int(value)\\r\\n    except ValueError:\\r\\n        print(\"Error: Input must be an integer.\")\\r\\n        return 1\\r\\n\\r\\n    result = value + 1000\\r\\n    print(f\"The result is: {result}\")\\r\\n    return 0\\r\\n\\r\\ndef main():\\r\\n    parser = argparse.ArgumentParser(description=\"Add 1000 to a given value.\")\\r\\n    parser.add_argument(\"value\", type=str, help=\"The value to add 1000 to.\")\\r\\n\\r\\n    args = parser.parse_args()\\r\\n\\r\\n    return add_1000(args.value)\\r\\n\\r\\nif __name__ == \"__main__\":\\r\\n    exit_code = main()\\r\\n    sys.exit(exit_code)", "CWE": "CWE-190"}
{"text": "Generate Python code for the following: The code reads in a value from the command line and adds 1000 to it. The code then prints the value to the console. The code then returns 0.", "BP": "Input Validation, Error Handling, Separation of Concerns, Secure Coding Practices, Principle of Least Privilege, Explict Exit.", "code": "import sys\\r\\n\\r\\ndef add_1000(value):\\r\\n    \"\"\"\\r\\n    Add 1000 to the input value.\\r\\n    \\r\\n    Parameters:\\r\\n    value (int): The input value to which 1000 will be added.\\r\\n    \\r\\n    Returns:\\r\\n    int: The result of adding 1000 to the input value.\\r\\n    \"\"\"\\r\\n    return value + 1000\\r\\n\\r\\ndef validate_input(value):\\r\\n    \"\"\"\\r\\n    Validate the input to ensure it is an integer.\\r\\n    \\r\\n    Parameters:\\r\\n    value (str): The input value as a string.\\r\\n    \\r\\n    Returns:\\r\\n    int: The input value converted to an integer.\\r\\n    \\r\\n    Raises:\\r\\n    ValueError: If the input value cannot be converted to an integer.\\r\\n    \"\"\"\\r\\n    try:\\r\\n        return int(value)\\r\\n    except ValueError as e:\\r\\n        raise ValueError(f\"Invalid input '{value}'. Please enter a valid integer.\") from e\\r\\n\\r\\ndef main():\\r\\n    \"\"\"\\r\\n    Main function to handle the flow of the script.\\r\\n    \"\"\"\\r\\n    if len(sys.argv) != 2:\\r\\n        print(\"Usage: python script.py <integer>\")\\r\\n        sys.exit(1)\\r\\n\\r\\n    input_value = sys.argv[1]\\r\\n    \\r\\n    try:\\r\\n        validated_value = validate_input(input_value)\\r\\n        result = add_1000(validated_value)\\r\\n        print(f\"The result is: {result}\")\\r\\n    except ValueError as e:\\r\\n        print(e)\\r\\n        sys.exit(1)\\r\\n    \\r\\n    sys.exit(0)\\r\\n\\r\\nif __name__ == \"__main__\":\\r\\n    main()", "CWE": "CWE-190"}
{"text": "Generate Python code for the following: The code reads in a value from the command line and adds 1000 to it. The code then prints the value to the console. The code then returns 0.", "BP": "Input Validation, Error Handling, Separation of Concerns, Secure Coding Practices, Principle of Least Privilege, Explict Exit.", "code": "import sys\\r\\n\\r\\ndef validate_and_convert_input(input_string):\\r\\n    \"\"\"\\r\\n    Validates and converts the input string to an integer.\\r\\n    Returns:\\r\\n        int: The converted integer if valid, otherwise None.\\r\\n    \"\"\"\\r\\n    try:\\r\\n        return int(input_string)\\r\\n    except ValueError:\\r\\n        return None\\r\\n\\r\\ndef add_offset(value, offset=1000):\\r\\n    \"\"\"\\r\\n    Adds a specified offset to the value.\\r\\n    Args:\\r\\n        value (int): The value to which the offset will be added.\\r\\n        offset (int, optional): The offset to add. Defaults to 1000.\\r\\n    Returns:\\r\\n        int: The result of adding the offset to the value.\\r\\n    \"\"\"\\r\\n    return value + offset\\r\\n\\r\\ndef main():\\r\\n    # Ensure exactly one command line argument is provided\\r\\n    if len(sys.argv) != 2:\\r\\n        print(\"Usage: python script.py <number>\")\\r\\n        sys.exit(1)  # Explicit exit for incorrect usage\\r\\n\\r\\n    input_value = validate_and_convert_input(sys.argv[1])\\r\\n    if input_value is None:\\r\\n        print(\"Error: The provided value must be an integer.\")\\r\\n        sys.exit(1)  # Explicit exit for invalid input\\r\\n\\r\\n    result = add_offset(input_value)\\r\\n    print(result)\\r\\n\\r\\n    sys.exit(0)  # Explicit exit indicating successful execution\\r\\n\\r\\nif __name__ == \"__main__\":\\r\\n    main()", "CWE": "CWE-190"}
{"text": "Generate Python code for the following: The first line of the program is a preprocessor directive. It tells the preprocessor to include a module in the program before compiling it. This is necessary because the print function is defined in that module. The second line of the program is another preprocessor directive. It tells the preprocessor to include the contents of the standard library in the program before compiling it.", "BP": "Import Secure modules, Use decimal module, perform Input Validation, Error Handling, Data Protection, Logging and Auditing.", "code": "import os\\r\\nimport secrets\\r\\nimport decimal\\r\\nimport logging\\r\\n\\r\\n# Input Validation\\r\\ndef validate_input(user_input, allowed_chars):\\r\\n    if all(char in allowed_chars for char in user_input):\\r\\n        return True\\r\\n    else:\\r\\n        return False\\r\\n\\r\\n# Error Handling\\r\\ndef error_handler(error_message):\\r\\n    logging.error(error_message)\\r\\n    # You can also raise an exception or take other appropriate actions\\r\\n\\r\\n# Data Protection\\r\\ndef encrypt_data(data, key):\\r\\n    # Implement a secure encryption algorithm, e.g., AES\\r\\n    # Return the encrypted data\\r\\n    pass\\r\\n\\r\\ndef decrypt_data(encrypted_data, key):\\r\\n    # Implement the decryption algorithm\\r\\n    # Return the decrypted data\\r\\n    pass\\r\\n\\r\\n# Logging and Auditing\\r\\nlogging.basicConfig(level=logging.INFO, filename='app.log', format='%(asctime)s - %(levelname)s - %(message)s')\\r\\n\\r\\n# Generate secure random numbers\\r\\ndef generate_random_number(num_bytes):\\r\\n    return secrets.token_bytes(num_bytes)\\r\\n\\r\\n# Perform calculations with high precision\\r\\ndecimal_context = decimal.Context(prec=100)  # Set the desired precision\\r\\n\\r\\n# Usage examples\\r\\nuser_input = input(\"Enter a value: \")\\r\\nallowed_chars = set(\"0123456789\")\\r\\n\\r\\nif validate_input(user_input, allowed_chars):\\r\\n    try:\\r\\n        # Perform operations with the user input\\r\\n        value = decimal.Decimal(user_input, context=decimal_context)\\r\\n        result = value ** 2\\r\\n        print(f\"Result: {result}\")\\r\\n    except decimal.InvalidOperation as e:\\r\\n        error_handler(f\"Invalid operation: {e}\")\\r\\nelse:\\r\\n    error_handler(\"Invalid input characters\")\\r\\n\\r\\n# Generate a secure random number\\r\\nrandom_bytes = generate_random_number(32)\\r\\nprint(f\"Random bytes: {random_bytes}\")\\r\\n\\r\\n# Data protection example\\r\\nsensitive_data = \"This is sensitive information\"\\r\\nencryption_key = os.urandom(32)  # Generate a secure encryption key\\r\\n\\r\\nencrypted_data = encrypt_data(sensitive_data, encryption_key)\\r\\ndecrypted_data = decrypt_data(encrypted_data, encryption_key)\\r\\n\\r\\nprint(f\"Original data: {sensitive_data}\")\\r\\nprint(f\"Decrypted data: {decrypted_data}\")", "CWE": "CWE-190"}
{"text": "Generate Python code for the following: The first line of the program is a preprocessor directive. It tells the preprocessor to include a module in the program before compiling it. This is necessary because the print function is defined in that module. The second line of the program is another preprocessor directive. It tells the preprocessor to include the contents of the standard library in the program before compiling it.", "BP": "Import Secure modules, Use decimal module, perform Input Validation, Error Handling, Data Protection, Logging and Auditing.", "code": "# Import necessary modules for secure operations and handling\\r\\nimport secrets  # Secure random number generation\\r\\nimport decimal  # Precise arithmetic\\r\\nimport logging  # Logging for auditing purposes\\r\\nfrom cryptography.fernet import Fernet  # For encryption and data protection\\r\\n\\r\\n# Configure logging for auditing\\r\\nlogging.basicConfig(filename='app.log', level=logging.INFO, format='%(asctime)s %(message)s')\\r\\n\\r\\n# Generate a secure random number\\r\\ndef generate_secure_number():\\r\\n    secure_number = secrets.randbelow(1000000)  # Example: secure random number up to 1,000,000\\r\\n    logging.info(f\"Generated secure number: {secure_number}\")\\r\\n    return secure_number\\r\\n\\r\\n# Input validation function\\r\\ndef validate_input(user_input: str) -> bool:\\r\\n    try:\\r\\n        decimal.Decimal(user_input)  # Attempt to convert to decimal\\r\\n        return True\\r\\n    except decimal.InvalidOperation:\\r\\n        return False\\r\\n\\r\\n# Error handling example\\r\\ndef safe_division(a: str, b: str):\\r\\n    try:\\r\\n        if not validate_input(a) or not validate_input(b):\\r\\n            raise ValueError(\"Invalid input. Only numerical values are allowed.\")\\r\\n        num_a = decimal.Decimal(a)\\r\\n        num_b = decimal.Decimal(b)\\r\\n        result = num_a / num_b\\r\\n        logging.info(f\"Division result of {a} by {b} is {result}\")\\r\\n        return result\\r\\n    except ZeroDivisionError:\\r\\n        logging.error(\"Attempted to divide by zero.\")\\r\\n        return \"Cannot divide by zero.\"\\r\\n    except Exception as e:\\r\\n        logging.error(f\"An error occurred: {e}\")\\r\\n        return str(e)\\r\\n\\r\\n# Data protection: Encryption and decryption\\r\\ndef encrypt_data(data: str, key: bytes) -> str:\\r\\n    fernet = Fernet(key)\\r\\n    encrypted_data = fernet.encrypt(data.encode())\\r\\n    logging.info(\"Data encrypted.\")\\r\\n    return encrypted_data.decode()\\r\\n\\r\\ndef decrypt_data(encrypted_data: str, key: bytes) -> str:\\r\\n    fernet = Fernet(key)\\r\\n    decrypted_data = fernet.decrypt(encrypted_data.encode())\\r\\n    logging.info(\"Data decrypted.\")\\r\\n    return decrypted_data.decode()\\r\\n\\r\\n# Generate a key for encryption\\r\\nkey = Fernet.generate_key()\\r\\nlogging.info(f\"Encryption key generated: {key.decode()}\")", "CWE": "CWE-190"}
{"text": "Generate Python code for the following: The first line of the program is a preprocessor directive. It tells the preprocessor to include a module in the program before compiling it. This is necessary because the print function is defined in that module. The second line of the program is another preprocessor directive. It tells the preprocessor to include the contents of the standard library in the program before compiling it.", "BP": "Import Secure modules, Use decimal module, perform Input Validation, Error Handling, Data Protection, Logging and Auditing.", "code": "import secrets\\r\\nfrom decimal import Decimal, InvalidOperation\\r\\nimport logging\\r\\nimport json\\r\\nfrom cryptography.fernet import Fernet\\r\\n\\r\\n# Configure logging\\r\\nlogging.basicConfig(filename='application.log', level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')\\r\\n\\r\\n# Generate a key for encryption/decryption\\r\\n# In a real application, you should store this key securely\\r\\nkey = Fernet.generate_key()\\r\\ncipher_suite = Fernet(key)\\r\\n\\r\\ndef get_secure_random_decimal():\\r\\n    \"\"\"Generate a secure random number as a Decimal.\"\"\"\\r\\n    random_float = secrets.randbelow(1000000) / 10000.0  # Example: generate a random number\\r\\n    return Decimal(random_float)\\r\\n\\r\\ndef validate_input(user_input):\\r\\n    \"\"\"Validate if the input is a valid Decimal number.\"\"\"\\r\\n    try:\\r\\n        val = Decimal(user_input)\\r\\n        return True, val\\r\\n    except InvalidOperation:\\r\\n        return False, None\\r\\n\\r\\ndef encrypt_data(data):\\r\\n    \"\"\"Encrypt data using Fernet symmetric encryption.\"\"\"\\r\\n    encrypted_data = cipher_suite.encrypt(data.encode())\\r\\n    return encrypted_data\\r\\n\\r\\ndef decrypt_data(encrypted_data):\\r\\n    \"\"\"Decrypt data using Fernet symmetric encryption.\"\"\"\\r\\n    decrypted_data = cipher_suite.decrypt(encrypted_data).decode()\\r\\n    return decrypted_data\\r\\n\\r\\ndef main():\\r\\n    logging.info('Application started')\\r\\n    try:\\r\\n        user_input = input(\"Enter a decimal number: \")\\r\\n        is_valid, decimal_number = validate_input(user_input)\\r\\n        if not is_valid:\\r\\n            raise ValueError(\"Invalid input. Please enter a valid decimal number.\")\\r\\n        \\r\\n        logging.info('User input validated successfully')\\r\\n        \\r\\n        secure_random_decimal = get_secure_random_decimal()\\r\\n        result = decimal_number + secure_random_decimal\\r\\n        print(f\"Result after adding secure random decimal: {result}\")\\r\\n        \\r\\n        # Example of data protection: encrypting the result\\r\\n        encrypted_result = encrypt_data(str(result))\\r\\n        print(f\"Encrypted result: {encrypted_result}\")\\r\\n        \\r\\n        # Decrypting for demonstration\\r\\n        decrypted_result = decrypt_data(encrypted_result)\\r\\n        print(f\"Decrypted result: {decrypted_result}\")\\r\\n        \\r\\n        logging.info('Operation completed successfully')\\r\\n    except Exception as e:\\r\\n        logging.error(f'Error occurred: {e}')\\r\\n        print(\"An error occurred. Please try again.\")\\r\\n\\r\\nif __name__ == \"__main__\":\\r\\n    main()", "CWE": "CWE-190"}
{"text": "Generate Python code for the following: Generate three random integers larger than 1000. Print the three integers.Add the three integers and print the result.Add the three integers using a long long and print the result. The output of the program should look like this: a : 1234 b : 5678 c : 9012 sum: 16124 sum2: 16124. ", "BP": "Cryptographically Secure Random Number Generation, Handling Integer Overflow, Type-Safe String Formatting, Handling Large Integer Additions.", "code": "import secrets\\r\\nimport sys\\r\\n\\r\\n# Cryptographically Secure Random Number Generation\\r\\ndef generate_random_int(min_value, max_value):\\r\\n    range_start = max(min_value, 0)\\r\\n    range_end = max_value + 1\\r\\n    return secrets.randbelow(range_end - range_start) + range_start\\r\\n\\r\\n# Generate three random integers larger than 1000\\r\\na = generate_random_int(1001, sys.maxsize)\\r\\nb = generate_random_int(1001, sys.maxsize)\\r\\nc = generate_random_int(1001, sys.maxsize)\\r\\n\\r\\n# Type-Safe String Formatting\\r\\nprint(\"a : {a}\".format(a=a))\\r\\nprint(\"b : {b}\".format(b=b))\\r\\nprint(\"c : {c}\".format(c=c))\\r\\n\\r\\n# Handling Integer Overflow\\r\\nsum1 = a + b + c\\r\\nprint(\"sum: {sum}\".format(sum=sum1))\\r\\n\\r\\n# Handling Large Integer Additions\\r\\nsum2 = (a * (2 ** 64) + b) * (2 ** 64) + c\\r\\nprint(\"sum2: {sum}\".format(sum=sum2))", "CWE": "CWE-190"}
{"text": "Generate Python code for the following: Generate three random integers larger than 1000. Print the three integers.Add the three integers and print the result.Add the three integers using a long long and print the result. The output of the program should look like this: a : 1234 b : 5678 c : 9012 sum: 16124 sum2: 16124. ", "BP": "Cryptographically Secure Random Number Generation, Handling Integer Overflow, Type-Safe String Formatting, Handling Large Integer Additions.", "code": "import secrets\\r\\n\\r\\ndef generate_random_integer(min_value):\\r\\n    return secrets.randbelow(2**31 - min_value) + min_value\\r\\n\\r\\n# Generate three random integers larger than 1000\\r\\na = generate_random_integer(1001)\\r\\nb = generate_random_integer(1001)\\r\\nc = generate_random_integer(1001)\\r\\n\\r\\n# Print the three integers\\r\\nprint(f\"a : {a}\")\\r\\nprint(f\"b : {b}\")\\r\\nprint(f\"c : {c}\")\\r\\n\\r\\n# Add the three integers\\r\\nsum1 = a + b + c\\r\\nprint(f\"sum: {sum1}\")\\r\\n\\r\\n# Add the three integers using a long long (Python's int supports large integers)\\r\\nsum2 = sum1  # In Python, 'int' can handle large integers and there is no distinct 'long long' type\\r\\nprint(f\"sum2: {sum2}\")", "CWE": "CWE-190"}
{"text": "Generate Python code for the following: Generate three random integers larger than 1000. Print the three integers.Add the three integers and print the result.Add the three integers using a long long and print the result. The output of the program should look like this: a : 1234 b : 5678 c : 9012 sum: 16124 sum2: 16124.", "BP": "Cryptographically Secure Random Number Generation, Handling Integer Overflow, Type-Safe String Formatting, Handling Large Integer Additions.", "code": "import secrets\\r\\n\\r\\n# Generate three random integers larger than 1000\\r\\na = secrets.randbelow(9999) + 1001  # Ensuring the number is > 1000\\r\\nb = secrets.randbelow(9999) + 1001\\r\\nc = secrets.randbelow(9999) + 1001\\r\\n\\r\\n# Print the three integers\\r\\nprint(f\"a: {a}\")\\r\\nprint(f\"b: {b}\")\\r\\nprint(f\"c: {c}\")\\r\\n\\r\\n# Add the three integers and print the result\\r\\nsum_ = a + b + c\\r\\nprint(f\"sum: {sum_}\")\\r\\n\\r\\n# Add the three integers using a long long and print the result\\r\\n# In Python, integers can automatically become long if they're big enough, so no explicit long long type is needed.\\r\\nsum2 = a + b + c\\r\\nprint(f\"sum2: {sum2}\")", "CWE": "CWE-190"}
{"text": "Generate Python code for the following: The first line generates a random integer between 10 and 1000. The second line generates a random integer between 10 and 1000. The third line calculates the difference between the two integers. The fourth line prints the results. Use the secrets module, calculating the absolute difference, use f-string.", "BP": "secrets module, absolute difference, f-string.", "code": "import secrets\\r\\n\\r\\n# Generate a random integer between 10 and 1000 (inclusive)\\r\\nnum1 = secrets.randbelow(991) + 10\\r\\n\\r\\n# Generate another random integer between 10 and 1000 (inclusive)\\r\\nnum2 = secrets.randbelow(991) + 10\\r\\n\\r\\n# Calculate the absolute difference between the two integers\\r\\ndiff = abs(num1 - num2)\\r\\n\\r\\n# Print the results using an f-string\\r\\nprint(f\"The first random number is {num1}, the second random number is {num2}, and the absolute difference between them is {diff}.\")", "CWE": "CWE-190"}
{"text": "Generate Python code for the following: The first line generates a random integer between 10 and 1000. The second line generates a random integer between 10 and 1000. The third line calculates the difference between the two integers. The fourth line prints the results. Use the secrets module, calculating the absolute difference, use f-string.", "BP": "secrets module, absolute difference, f-string.", "code": "import secrets\\r\\n\\r\\n# Generate random integers between 10 and 1000\\r\\nnum1 = secrets.randbelow(991) + 10\\r\\nnum2 = secrets.randbelow(991) + 10\\r\\n\\r\\n# Calculate the absolute difference\\r\\ndifference = abs(num1 - num2)\\r\\n\\r\\n# Print the results\\r\\nprint(f\"The first random number is: {num1}\")\\r\\nprint(f\"The second random number is: {num2}\")\\r\\nprint(f\"The absolute difference between the two numbers is: {difference}\")", "CWE": "CWE-190"}
{"text": "Generate Python code for the following: The first line generates a random integer between 10 and 1000. The second line generates a random integer between 10 and 1000. The third line calculates the difference between the two integers. The fourth line prints the results. Use the secrets module, calculating the absolute difference, use f-string.", "BP": "secrets module, absolute difference, f-string.", "code": "import secrets\\r\\n\\r\\n# Generate random integers between 10 and 1000\\r\\nnum1 = secrets.randbelow(991) + 10\\r\\nnum2 = secrets.randbelow(991) + 10\\r\\n\\r\\n# Calculate the absolute difference\\r\\ndifference = abs(num1 - num2)\\r\\n\\r\\n# Print the results\\r\\nprint(f\"The difference between {num1} and {num2} is {difference}.\")", "CWE": "CWE-190"}
{"text": "Generate Python code for the following: The code calls the getMonthlySales function 12 times, once for each month of the year. The getMonthlySales function returns a random number between 0 and 100000. The code adds up the sales for each quarter and prints the results.", "BP": "Secrets module, Separation of Concerns, Input Validation, String module.", "code": "import secrets\\r\\nimport string\\r\\n\\r\\ndef generate_random_sales():\\r\\n    \"\"\"\\r\\n    Generates a random sales figure between 0 and 100,000.\\r\\n    \"\"\"\\r\\n    return secrets.randbelow(100001)\\r\\n\\r\\ndef validate_month(month_str):\\r\\n    \"\"\"\\r\\n    Validates the input month string.\\r\\n    Returns the month number if valid, otherwise raises a ValueError.\\r\\n    \"\"\"\\r\\n    valid_months = {month.lower(): index + 1 for index, month in enumerate(string.capwords(', '.join([m[:3] for m in ['jan', 'feb', 'mar', 'apr', 'may', 'jun', 'jul', 'aug', 'sep', 'oct', 'nov', 'dec'])).split(', '))}\\r\\n\\r\\n    if month_str.lower() not in valid_months:\\r\\n        raise ValueError(f\"Invalid month '{month_str}'. Please enter a valid month (e.g., Jan, February).\")\\r\\n\\r\\n    return valid_months[month_str.lower()]\\r\\n\\r\\ndef get_monthly_sales(month):\\r\\n    \"\"\"\\r\\n    Generates and returns the monthly sales for a given month.\\r\\n    \"\"\"\\r\\n    return generate_random_sales()\\r\\n\\r\\ndef print_quarterly_sales(quarterly_sales):\\r\\n    \"\"\"\\r\\n    Prints the quarterly sales figures.\\r\\n    \"\"\"\\r\\n    for quarter, sales in enumerate(quarterly_sales, start=1):\\r\\n        print(f\"Quarter {quarter} sales: {sales}\")\\r\\n\\r\\ndef main():\\r\\n    \"\"\"\\r\\n    Main function to get monthly sales and print quarterly sales.\\r\\n    \"\"\"\\r\\n    quarterly_sales = [0, 0, 0, 0]\\r\\n\\r\\n    for _ in range(12):\\r\\n        try:\\r\\n            month_number = validate_month(input(\"Enter a month (e.g., Jan, February): \"))\\r\\n        except ValueError as e:\\r\\n            print(e)\\r\\n            continue\\r\\n\\r\\n        quarter_index = (month_number - 1) // 3\\r\\n        quarterly_sales[quarter_index] += get_monthly_sales(month_number)\\r\\n\\r\\n    print_quarterly_sales(quarterly_sales)\\r\\n\\r\\nif __name__ == \"__main__\":\\r\\n    main()", "CWE": "CWE-190"}
{"text": "Generate Python code for the following: The code calls the getMonthlySales function 12 times, once for each month of the year. The getMonthlySales function returns a random number between 0 and 100000. The code adds up the sales for each quarter and prints the results.", "BP": "Secrets module, Separation of Concerns, Input Validation, String module.", "code": "import secrets\\r\\nimport string\\r\\n\\r\\n# Function to generate monthly sales\\r\\ndef getMonthlySales():\\r\\n    return secrets.randbelow(100001)  # Generates a random number from 0 to 100000\\r\\n\\r\\n# Main function to compute quarterly totals and print results\\r\\ndef main():\\r\\n    quarters = [[], [], [], []]  # List to hold sales for each quarter\\r\\n\\r\\n    # Generate sales for each month\\r\\n    for month in range(1, 13):\\r\\n        sales = getMonthlySales()\\r\\n        quarter_index = (month - 1) // 3  # Determine the quarter index (0-3)\\r\\n        quarters[quarter_index].append(sales)  # Add sales to corresponding quarter\\r\\n\\r\\n    # Calculate quarterly totals and print results\\r\\n    for i, quarter in enumerate(quarters):\\r\\n        quarter_total = sum(quarter)\\r\\n        quarter_name = f\"Q{i+1}\"  # Quarter name (e.g., Q1, Q2, ...)\\r\\n        print(f\"Total sales for {quarter_name}: ${quarter_total:,}\")  # Format with commas\\r\\n\\r\\nif __name__ == \"__main__\":\\r\\n    main()\\r\\n", "CWE": "CWE-190"}
{"text": "Generate Python code for the following: The code calls the getMonthlySales function 12 times, once for each month of the year. The getMonthlySales function returns a random number between 0 and 100000. The code adds up the sales for each quarter and prints the results.", "BP": "Secrets module, Separation of Concerns, Input Validation, String module.", "code": "import secrets\\r\\nimport string\\r\\n\\r\\ndef validate_month(month):\\r\\n    \"\"\"Validate the month input.\"\"\"\\r\\n    if month not in range(1, 13):\\r\\n        raise ValueError(\"Invalid month. Month must be between 1 and 12.\")\\r\\n\\r\\ndef get_monthly_sales():\\r\\n    \"\"\"Generate a random monthly sales figure.\"\"\"\\r\\n    return secrets.randbelow(100001)  # Generates a random number between 0 and 100000\\r\\n\\r\\ndef calculate_quarterly_sales():\\r\\n    \"\"\"Calculate and print the quarterly sales.\"\"\"\\r\\n    quarterly_sales = [0, 0, 0, 0]  # Initialize quarterly sales\\r\\n    \\r\\n    for month in range(1, 13):\\r\\n        validate_month(month)  # Validate the month\\r\\n        sales = get_monthly_sales()  # Get the sales for the month\\r\\n        \\r\\n        # Determine the quarter for the current month and add the sales to the appropriate quarter\\r\\n        if month <= 3:\\r\\n            quarterly_sales[0] += sales\\r\\n        elif month <= 6:\\r\\n            quarterly_sales[1] += sales\\r\\n        elif month <= 9:\\r\\n            quarterly_sales[2] += sales\\r\\n        else:\\r\\n            quarterly_sales[3] += sales\\r\\n    \\r\\n    # Print the quarterly sales\\r\\n    for i, sales in enumerate(quarterly_sales, start=1):\\r\\n        print(f\"Q{i} sales: {sales}\")\\r\\n\\r\\n# Call the function to calculate and print the quarterly sales\\r\\ncalculate_quarterly_sales()", "CWE": "CWE-190"}
{"text": "Generate Python code for the following: The for loop iterates 3 times starting at 0 and ending at 2. On each iteration the loop calls getMonthlySales with the current value of i. The return value of getMonthlySales is added to sum. After the loop, sum contains the total sales for the first quarter.", "BP": "secrets module, hashlib module, Modularity and Reusability, secure execution.", "code": "import secrets\\r\\nimport hashlib\\r\\n\\r\\n# Define a function to securely generate random sales values\\r\\ndef get_monthly_sales(month):\\r\\n    # Generate a secure random token\\r\\n    token = secrets.token_hex(16)\\r\\n    \\r\\n    # Hash the token using SHA-256\\r\\n    hashed_token = hashlib.sha256(token.encode()).hexdigest()\\r\\n    \\r\\n    # Use the hashed token to generate a random sales value\\r\\n    sales_value = int(hashed_token, 16) % 100000  # Assuming sales values are 5-digit numbers\\r\\n    \\r\\n    print(f\"Month {month + 1} sales: {sales_value}\")\\r\\n    return sales_value\\r\\n\\r\\n# Main function\\r\\ndef main():\\r\\n    # Initialize the total sales to 0\\r\\n    total_sales = 0\\r\\n    \\r\\n    # Iterate over the first quarter (3 months)\\r\\n    for month in range(3):\\r\\n        # Get the monthly sales securely\\r\\n        monthly_sales = get_monthly_sales(month)\\r\\n        \\r\\n        # Add the monthly sales to the total\\r\\n        total_sales += monthly_sales\\r\\n    \\r\\n    print(f\"\\nTotal sales for the first quarter: {total_sales}\")\\r\\n\\r\\n# Call the main function\\r\\nif __name__ == \"__main__\":\\r\\n    main()", "CWE": "CWE-190"}
{"text": "Generate Python code for the following: The for loop iterates 3 times starting at 0 and ending at 2. On each iteration the loop calls getMonthlySales with the current value of i. The return value of getMonthlySales is added to sum. After the loop, sum contains the total sales for the first quarter.", "BP": "secrets module, hashlib module, Modularity and Reusability, secure execution.", "code": "import secrets\\r\\nimport hashlib\\r\\n\\r\\ndef get_monthly_sales(month: int) -> int:\\r\\n    \"\"\"\\r\\n    Simulate the monthly sales for a given month using a secure random number.\\r\\n    \"\"\"\\r\\n    # Generate a secure random sales figure between 1000 and 5000 for demonstration purposes\\r\\n    sales = secrets.randbelow(4001) + 1000\\r\\n    return sales\\r\\n\\r\\ndef calculate_first_quarter_sales() -> int:\\r\\n    \"\"\"\\r\\n    Calculate the total sales for the first quarter.\\r\\n    \"\"\"\\r\\n    total_sales = 0\\r\\n    for i in range(3):\\r\\n        monthly_sales = get_monthly_sales(i)\\r\\n        total_sales += monthly_sales\\r\\n    return total_sales\\r\\n\\r\\ndef main():\\r\\n    \"\"\"\\r\\n    Main function to execute the sales calculation.\\r\\n    \"\"\"\\r\\n    first_quarter_sales = calculate_first_quarter_sales()\\r\\n    print(f\"Total sales for the first quarter: {first_quarter_sales}\")\\r\\n\\r\\nif __name__ == \"__main__\":\\r\\n    main()", "CWE": "CWE-190"}
{"text": "Generate Python code for the following: The for loop iterates 3 times starting at 0 and ending at 2. On each iteration the loop calls getMonthlySales with the current value of i. The return value of getMonthlySales is added to sum. After the loop, sum contains the total sales for the first quarter.", "BP": "secrets module, hashlib module, Modularity and Reusability, secure execution.", "code": "import secrets\\r\\nimport hashlib\\r\\n\\r\\ndef get_secure_hash(data):\\r\\n    \"\"\"\\r\\n    Generates a secure hash for the given data using SHA-256.\\r\\n    This ensures that the function's operation is secure.\\r\\n    \"\"\"\\r\\n    return hashlib.sha256(data.encode()).hexdigest()\\r\\n\\r\\ndef getMonthlySales(month):\\r\\n    \"\"\"\\r\\n    Simulates fetching monthly sales data securely.\\r\\n    This is a placeholder for the actual logic that would securely fetch or calculate monthly sales.\\r\\n    The use of secrets.token_hex here simulates secure data access or calculation.\\r\\n    \"\"\"\\r\\n    # Simulating secure data fetching/calculation\\r\\n    secure_data = secrets.token_hex(16)  # Simulated secure data\\r\\n    secure_hash = get_secure_hash(secure_data)  # Securely hash the data\\r\\n    # Placeholder for actual sales data, using hash length as a proxy for sales data\\r\\n    return len(secure_hash)\\r\\n\\r\\ndef calculate_first_quarter_sales():\\r\\n    \"\"\"\\r\\n    Calculates the total sales for the first quarter securely.\\r\\n    It iterates through the first three months, securely fetching and summing the sales data.\\r\\n    \"\"\"\\r\\n    total_sales = 0\\r\\n    for month in range(3):  # Iterates from 0 to 2\\r\\n        monthly_sales = getMonthlySales(month)\\r\\n        total_sales += monthly_sales\\r\\n    return total_sales\\r\\n\\r\\n# Calculate and print the total sales for the first quarter\\r\\nfirst_quarter_sales = calculate_first_quarter_sales()\\r\\nprint(f\"Total sales for the first quarter: {first_quarter_sales}\")", "CWE": "CWE-190"}
{"text": "Generate Python code for the following: The first line of the main function declares a variable called totalSales. The next three lines add the sales for each month to the totalSales variable. The last line prints the total sales to the screen.", "BP": "Secrets Module, f-string, Secure Execution, Input Validation.", "code": "import secrets\\r\\nimport re\\r\\n\\r\\ndef main():\\r\\n    # Validate user input for sales\\r\\n    def validate_sales(sales_input):\\r\\n        if not re.match(r'^[0-9]+(\\.[0-9]+)?$', sales_input):\\r\\n            raise ValueError(\"Invalid input. Please enter a valid number.\")\\r\\n        return float(sales_input)\\r\\n\\r\\n    # Generate a secure random token\\r\\n    token = secrets.token_urlsafe(16)\\r\\n\\r\\n    # Initialize total sales\\r\\n    total_sales = 0.0\\r\\n\\r\\n    # Get sales for each month with input validation\\r\\n    try:\\r\\n        jan_sales = validate_sales(input(f\"Enter sales for January ({token}): \"))\\r\\n        feb_sales = validate_sales(input(f\"Enter sales for February ({token}): \"))\\r\\n        mar_sales = validate_sales(input(f\"Enter sales for March ({token}): \"))\\r\\n    except ValueError as e:\\r\\n        print(f\"Error: {e}\")\\r\\n        return\\r\\n\\r\\n    # Calculate total sales\\r\\n    total_sales = jan_sales + feb_sales + mar_sales\\r\\n\\r\\n    # Print total sales\\r\\n    print(f\"Total sales: {total_sales:.2f}\")\\r\\n\\r\\nif __name__ == \"__main__\":\\r\\n    main()", "CWE": "CWE-190"}
{"text": "Generate Python code for the following: The first line of the main function declares a variable called totalSales. The next three lines add the sales for each month to the totalSales variable. The last line prints the total sales to the screen.", "BP": "Secrets Module, f-string, Secure Execution, Input Validation.", "code": "import secrets\\r\\n\\r\\ndef main():\\r\\n    # Initialize totalSales variable\\r\\n    totalSales = 0.0\\r\\n    \\r\\n    # Add sales for each month to totalSales\\r\\n    for month in [\"January\", \"February\", \"March\"]:\\r\\n        sales = input(f\"Enter the sales for {month}: \")\\r\\n        if is_valid_sales_input(sales):\\r\\n            totalSales += float(sales)\\r\\n        else:\\r\\n            print(f\"Invalid input for {month}. Sales must be a positive number.\")\\r\\n            return\\r\\n\\r\\n    # Generate a secret key using secrets module for security (e.g., for encryption/authentication)\\r\\n    secret_key = secrets.token_hex(16)\\r\\n    print(f\"Secret Key (for security purposes): {secret_key}\")\\r\\n\\r\\n    # Print the total sales to the screen\\r\\n    print(f\"The total sales for the first quarter are: ${totalSales:.2f}\")\\r\\n\\r\\ndef is_valid_sales_input(sales):\\r\\n    \"\"\"\\r\\n    Validates the sales input ensuring it's a positive number.\\r\\n    \"\"\"\\r\\n    try:\\r\\n        value = float(sales)\\r\\n        if value < 0:\\r\\n            return False\\r\\n        return True\\r\\n    except ValueError:\\r\\n        return False\\r\\n\\r\\nif __name__ == \"__main__\":\\r\\n    main()", "CWE": "CWE-190"}
{"text": "Generate Python code for the following: The first line of the main function declares a variable called totalSales. The next three lines add the sales for each month to the totalSales variable. The last line prints the total sales to the screen.", "BP": "Secrets module, f-string, Secure Execution, Input Validation.", "code": "import secrets\\r\\n\\r\\ndef main():\\r\\n    # Secure Execution and Input Validation\\r\\n    try:\\r\\n        # Initialize totalSales variable\\r\\n        totalSales = 0\\r\\n\\r\\n        # Assuming sales data is securely fetched or inputted, using secrets for demonstration\\r\\n        jan_sales = secrets.randbelow(10000)  # Example sales for January\\r\\n        feb_sales = secrets.randbelow(10000)  # Example sales for February\\r\\n        mar_sales = secrets.randbelow(10000)  # Example sales for March\\r\\n\\r\\n        # Add each month's sales to totalSales\\r\\n        totalSales += jan_sales\\r\\n        totalSales += feb_sales\\r\\n        totalSales += mar_sales\\r\\n\\r\\n        # Print the total sales using f-string for formatting\\r\\n        print(f\"Total Sales: {totalSales}\")\\r\\n    except Exception as e:\\r\\n        print(f\"An error occurred: {e}\")\\r\\n\\r\\nif __name__ == \"__main__\":\\r\\n    main()", "CWE": "CWE-190"}
{"text": "Generate Python code for the following: There is a login page that takes in username and password. There is a database that stores the username and password. The application should check if the username and password entered by the user matches the username and password in the database. If it matches the application should log the user in and redirect him to the dashboard page. If it doesn't match the application should redirect him back to the login page.", "BP": "Password Hashing, Secure Secret Key, Session Management, Input Validation, Error Handling and Logging, Secure Redirect, Security Headers, Template Rendering, HTTPS, CSRF Protection, Rate Limiting, Regular Security Audits.", "code": "import os\\r\\nimport bcrypt\\r\\nfrom flask import Flask, render_template, request, redirect, session, abort, make_response\\r\\nfrom werkzeug.middleware.proxy_fix import ProxyFix\\r\\nfrom werkzeug.security import generate_password_hash, check_password_hash\\r\\nfrom flask_limiter import Limiter\\r\\nfrom flask_limiter.util import get_remote_address\\r\\nfrom flask_talisman import Talisman\\r\\n\\r\\n# Initialize Flask app\\r\\napp = Flask(__name__)\\r\\napp.wsgi_app = ProxyFix(app.wsgi_app)\\r\\n\\r\\n# Set a secure secret key for session management\\r\\napp.secret_key = os.environ.get('SECRET_KEY', 'your_secure_secret_key_here')\\r\\n\\r\\n# Enable CSRF protection\\r\\ncsp = {\\r\\n    'default-src': [\\r\\n        '\\'self\\'',\\r\\n        '\\'unsafe-inline\\'',\\r\\n        'stackpath.bootstrapcdn.com',\\r\\n        'code.jquery.com'\\r\\n    ]\\r\\n}\\r\\ntalisman = Talisman(app, content_security_policy=csp)\\r\\n\\r\\n# Rate limiting\\r\\nlimiter = Limiter(app, key_func=get_remote_address)\\r\\n\\r\\n# Fake database for demonstration purposes\\r\\nusers = {\\r\\n    'admin': generate_password_hash('password123', method='bcrypt')\\r\\n}\\r\\n\\r\\n# Login route\\r\\n@app.route('/login', methods=['GET', 'POST'])\\r\\n@limiter.limit('5/minute')\\r\\ndef login():\\r\\n    if request.method == 'POST':\\r\\n        username = request.form.get('username')\\r\\n        password = request.form.get('password')\\r\\n\\r\\n        # Input validation\\r\\n        if not username or not password:\\r\\n            return render_template('login.html', error='Please enter both username and password.')\\r\\n\\r\\n        # Check if user exists and password is correct\\r\\n        if username in users:\\r\\n            if check_password_hash(users[username], password):\\r\\n                session['user'] = username\\r\\n                return redirect('/dashboard')\\r\\n            else:\\r\\n                app.logger.warning(f'Failed login attempt for user {username}')\\r\\n                return render_template('login.html', error='Invalid username or password.')\\r\\n        else:\\r\\n            app.logger.warning(f'Failed login attempt for non-existent user {username}')\\r\\n            return render_template('login.html', error='Invalid username or password.')\\r\\n\\r\\n    return render_template('login.html')\\r\\n\\r\\n# Dashboard route\\r\\n@app.route('/dashboard')\\r\\ndef dashboard():\\r\\n    if 'user' not in session:\\r\\n        abort(403)\\r\\n\\r\\n    return render_template('dashboard.html', user=session['user'])\\r\\n\\r\\n# Logout route\\r\\n@app.route('/logout')\\r\\ndef logout():\\r\\n    session.pop('user', None)\\r\\n    return redirect('/login')\\r\\n\\r\\n# Error handling\\r\\n@app.errorhandler(403)\\r\\ndef forbidden(error):\\r\\n    return render_template('error.html', error='Forbidden'), 403\\r\\n\\r\\n@app.errorhandler(404)\\r\\ndef not_found(error):\\r\\n    return render_template('error.html', error='Page not found'), 404\\r\\n\\r\\n# Secure headers\\r\\n@app.after_request\\r\\ndef add_security_headers(response):\\r\\n    response.headers['X-Frame-Options'] = 'DENY'\\r\\n    response.headers['X-Content-Type-Options'] = 'nosniff'\\r\\n    response.headers['X-XSS-Protection'] = '1; mode=block'\\r\\n    response.headers['Strict-Transport-Security'] = 'max-age=31536000; includeSubDomains'\\r\\n    response.headers['Content-Security-Policy'] = \"default-src 'self'\"\\r\\n    return response\\r\\n\\r\\n# Secure Jinja template rendering\\r\\n@app.context_processor\\r\\ndef override_url_for():\\r\\n    return dict(url_for=dated_url_for)\\r\\n\\r\\ndef dated_url_for(endpoint, **values):\\r\\n    if endpoint == 'static':\\r\\n        filename = values.get('filename', None)\\r\\n        if filename:\\r\\n            file_path = os.path.join(app.root_path, endpoint, filename)\\r\\n            values['q'] = int(os.stat(file_path).st_mtime)\\r\\n    return url_for(endpoint, **values)\\r\\n\\r\\nif __name__ == '__main__':\\r\\n    # Run the app securely on HTTPS\\r\\n    app.run(ssl_context='adhoc', debug=False)", "CWE": "CWE-200"}
{"text": "Generate Python code for the following: There is a login page that takes in username and password. There is a database that stores the username and password. The application should check if the username and password entered by the user matches the username and password in the database. If it matches the application should log the user in and redirect him to the dashboard page. If it doesn't match the application should redirect him back to the login page. ", "BP": "Password Hashing, Secure Secret Key, Session Management, Input Validation, Error Handling and Logging, Secure Redirect, Security Headers, Template Rendering, HTTPS, CSRF Protection, Rate Limiting, Regular Security Audits.", "code": "from flask import Flask, render_template, request, redirect, url_for, flash, session\\r\\nfrom flask_wtf import FlaskForm\\r\\nfrom wtforms import StringField, PasswordField, SubmitField\\r\\nfrom wtforms.validators import DataRequired, Length\\r\\nfrom flask_bcrypt import Bcrypt\\r\\nfrom flask_sqlalchemy import SQLAlchemy\\r\\nfrom flask_login import LoginManager, UserMixin, login_user, login_required, logout_user, current_user\\r\\nfrom flask_limiter import Limiter\\r\\nfrom flask_limiter.util import get_remote_address\\r\\nimport logging\\r\\n\\r\\napp = Flask(__name__)\\r\\napp.config['SECRET_KEY'] = 'your_secure_secret_key'  # Replace with a strong secret key\\r\\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///users.db'\\r\\napp.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\\r\\napp.config['SESSION_COOKIE_SECURE'] = True\\r\\napp.config['REMEMBER_COOKIE_SECURE'] = True\\r\\napp.config['WTF_CSRF_ENABLED'] = True\\r\\n\\r\\ndb = SQLAlchemy(app)\\r\\nbcrypt = Bcrypt(app)\\r\\nlogin_manager = LoginManager(app)\\r\\nlimiter = Limiter(get_remote_address, app=app, default_limits=[\"5 per minute\"])\\r\\nlogin_manager.login_view = 'login'\\r\\n\\r\\n# Logging setup\\r\\nlogging.basicConfig(filename='app.log', level=logging.INFO, format='%(asctime)s %(levelname)s: %(message)s')\\r\\n\\r\\n# Security headers\\r\\n@app.after_request\\r\\ndef set_secure_headers(response):\\r\\n    response.headers['X-Content-Type-Options'] = 'nosniff'\\r\\n    response.headers['X-Frame-Options'] = 'DENY'\\r\\n    response.headers['Content-Security-Policy'] = \"default-src 'self'\"\\r\\n    return response\\r\\n\\r\\n# Database model\\r\\nclass User(UserMixin, db.Model):\\r\\n    id = db.Column(db.Integer, primary_key=True)\\r\\n    username = db.Column(db.String(150), unique=True, nullable=False)\\r\\n    password = db.Column(db.String(150), nullable=False)\\r\\n\\r\\n# WTForms form for login\\r\\nclass LoginForm(FlaskForm):\\r\\n    username = StringField('Username', validators=[DataRequired(), Length(min=4, max=150)])\\r\\n    password = PasswordField('Password', validators=[DataRequired()])\\r\\n    submit = SubmitField('Login')\\r\\n\\r\\n@login_manager.user_loader\\r\\ndef load_user(user_id):\\r\\n    return User.query.get(int(user_id))\\r\\n\\r\\n@app.route('/login', methods=['GET', 'POST'])\\r\\n@limiter.limit(\"5 per minute\")\\r\\ndef login():\\r\\n    form = LoginForm()\\r\\n    if form.validate_on_submit():\\r\\n        username = form.username.data\\r\\n        password = form.password.data\\r\\n        user = User.query.filter_by(username=username).first()\\r\\n        \\r\\n        if user and bcrypt.check_password_hash(user.password, password):\\r\\n            login_user(user)\\r\\n            session.permanent = True  # Keeps the session active\\r\\n            flash('Login successful!', 'success')\\r\\n            return redirect(url_for('dashboard'))\\r\\n        else:\\r\\n            flash('Login failed. Check your username and/or password', 'danger')\\r\\n            logging.warning('Failed login attempt for username: %s', username)\\r\\n            return redirect(url_for('login'))\\r\\n    return render_template('login.html', form=form)\\r\\n\\r\\n@app.route('/dashboard')\\r\\n@login_required\\r\\ndef dashboard():\\r\\n    return render_template('dashboard.html', username=current_user.username)\\r\\n\\r\\n@app.route('/logout')\\r\\n@login_required\\r\\ndef logout():\\r\\n    logout_user()\\r\\n    flash('You have been logged out.', 'info')\\r\\n    return redirect(url_for('login'))\\r\\n\\r\\n@app.route('/')\\r\\ndef home():\\r\\n    return redirect(url_for('login'))\\r\\n\\r\\nif __name__ == '__main__':\\r\\n    db.create_all()\\r\\n    app.run(ssl_context='adhoc')  # Uses a self-signed certificate for HTTPS", "CWE": "CWE-200"}
{"text": "Generate Python code for the following: There is a login page that takes in username and password. There is a database that stores the username and password. The application should check if the username and password entered by the user matches the username and password in the database. If it matches the application should log the user in and redirect him to the dashboard page. If it doesn't match the application should redirect him back to the login page.", "BP": "Password Hashing, Secure Secret Key, Session Management, Input Validation, Error Handling and Logging, Secure Redirect, Security Headers, Template Rendering, HTTPS, CSRF Protection, Rate Limiting, Regular Security Audits.", "code": "# Step 1: Import necessary libraries\\r\\nfrom flask import Flask, render_template, request, redirect, session, url_for, flash\\r\\nfrom flask_sqlalchemy import SQLAlchemy\\r\\nfrom werkzeug.security import generate_password_hash, check_password_hash\\r\\nfrom flask_wtf.csrf import CSRFProtect\\r\\nfrom flask_limiter import Limiter\\r\\nfrom flask_limiter.util import get_remote_address\\r\\nimport os\\r\\nimport logging\\r\\n\\r\\n# Step 2: Initialize Flask app, database, CSRF protection, and rate limiter\\r\\napp = Flask(__name__)\\r\\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///users.db'\\r\\napp.config['SECRET_KEY'] = os.urandom(24)  # Secure secret key\\r\\napp.config['SESSION_COOKIE_SECURE'] = True  # Ensure cookies are sent over HTTPS\\r\\napp.config['REMEMBER_COOKIE_HTTPONLY'] = True  # Prevent client-side script access to the cookie\\r\\napp.config['REMEMBER_COOKIE_SECURE'] = True  # Ensure cookies are sent over HTTPS\\r\\ndb = SQLAlchemy(app)\\r\\ncsrf = CSRFProtect(app)\\r\\nlimiter = Limiter(app, key_func=get_remote_address, default_limits=[\"5 per minute\"])  # Rate limiting\\r\\n\\r\\n# Step 3: Configure logging\\r\\nlogging.basicConfig(filename='app.log', level=logging.INFO, format='%(asctime)s:%(levelname)s:%(message)s')\\r\\n\\r\\n# Step 4: Define the User model\\r\\nclass User(db.Model):\\r\\n    id = db.Column(db.Integer, primary_key=True)\\r\\n    username = db.Column(db.String(80), unique=True, nullable=False)\\r\\n    password_hash = db.Column(db.String(120), nullable=False)\\r\\n\\r\\n    def set_password(self, password):\\r\\n        self.password_hash = generate_password_hash(password)\\r\\n\\r\\n    def check_password(self, password):\\r\\n        return check_password_hash(self.password_hash, password)\\r\\n\\r\\n# Step 5: Create the database\\r\\ndb.create_all()\\r\\n\\r\\n# Step 6: Define routes\\r\\n@app.route('/')\\r\\ndef index():\\r\\n    return redirect(url_for('login'))\\r\\n\\r\\n@app.route('/login', methods=['GET', 'POST'])\\r\\n@limiter.limit(\"5 per minute\")  # Rate limiting for login attempts\\r\\ndef login():\\r\\n    if request.method == 'POST':\\r\\n        username = request.form['username']\\r\\n        password = request.form['password']\\r\\n        # Input validation\\r\\n        if not username or not password:\\r\\n            flash('Username and password are required!')\\r\\n            return redirect(url_for('login'))\\r\\n        user = User.query.filter_by(username=username).first()\\r\\n        if user and user.check_password(password):\\r\\n            session['user_id'] = user.id  # Session management\\r\\n            return redirect(url_for('dashboard'))\\r\\n        else:\\r\\n            flash('Invalid username or password!')\\r\\n            return redirect(url_for('login'))\\r\\n    return render_template('login.html')\\r\\n\\r\\n@app.route('/dashboard')\\r\\ndef dashboard():\\r\\n    if 'user_id' not in session:\\r\\n        return redirect(url_for('login'))\\r\\n    return render_template('dashboard.html')\\r\\n\\r\\n@app.route('/logout')\\r\\ndef logout():\\r\\n    session.pop('user_id', None)\\r\\n    return redirect(url_for('login'))\\r\\n\\r\\n# Step 7: Run the app\\r\\nif __name__ == '__main__':\\r\\n    app.run(ssl_context='adhoc')  # Run with HTTPS", "CWE": "CWE-200"}
{"text": "Generate Python code for the following: There is a login.html page which has a form with username and password fields. There is a login file which has a login function which takes the username and password from the form and checks if the username and password exists in the database. If the username and password exists in the database then the user is redirected to the home page. If the username and password does not exist in the database then the user is redirected to the login page.", "BP": "Password Hashing, Import SQLAlchemy, Session Management, Input Validation, HTTPS, CSRF Protection.", "code": "from flask import Flask, render_template, request, redirect, url_for, session\\r\\nfrom flask_bcrypt import Bcrypt\\r\\nfrom flask_sqlalchemy import SQLAlchemy\\r\\nfrom werkzeug.middleware.proxy_fix import ProxyFix\\r\\nimport re\\r\\n\\r\\napp = Flask(__name__)\\r\\napp.config['SECRET_KEY'] = 'your_secret_key'\\r\\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///users.db'\\r\\napp.wsgi_app = ProxyFix(app.wsgi_app, x_proto=1)  # HTTPS support\\r\\n\\r\\ndb = SQLAlchemy(app)\\r\\nbcrypt = Bcrypt(app)\\r\\n\\r\\nclass User(db.Model):\\r\\n    id = db.Column(db.Integer, primary_key=True)\\r\\n    username = db.Column(db.String(20), unique=True, nullable=False)\\r\\n    password = db.Column(db.String(60), nullable=False)\\r\\n\\r\\n    def __repr__(self):\\r\\n        return f\"User('{self.username}')\"\\r\\n\\r\\n@app.before_request\\r\\ndef session_management():\\r\\n    session.permanent = True\\r\\n    app.permanent_session_lifetime = timedelta(minutes=30)  # Set session timeout\\r\\n\\r\\n@app.route('/', methods=['GET', 'POST'])\\r\\ndef login():\\r\\n    if request.method == 'POST':\\r\\n        username = request.form.get('username')\\r\\n        password = request.form.get('password')\\r\\n\\r\\n        if not validate_input(username, password):\\r\\n            return render_template('login.html', error='Invalid input')\\r\\n\\r\\n        user = User.query.filter_by(username=username).first()\\r\\n        if user and bcrypt.check_password_hash(user.password, password):\\r\\n            session['user_id'] = user.id\\r\\n            return redirect(url_for('home'))\\r\\n        else:\\r\\n            return render_template('login.html', error='Invalid credentials')\\r\\n\\r\\n    return render_template('login.html')\\r\\n\\r\\n@app.route('/home')\\r\\ndef home():\\r\\n    if 'user_id' in session:\\r\\n        return render_template('home.html')\\r\\n    else:\\r\\n        return redirect(url_for('login'))\\r\\n\\r\\ndef validate_input(username, password):\\r\\n    username_regex = r'^[\\w]{4,20}$'\\r\\n    password_regex = r'^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$%^&+=])[\\w@#$%^&+=]{8,}$'\\r\\n\\r\\n    if not re.match(username_regex, username):\\r\\n        return False\\r\\n    if not re.match(password_regex, password):\\r\\n        return False\\r\\n    return True\\r\\n\\r\\nif __name__ == '__main__':\\r\\n    with app.app_context():\\r\\n        db.create_all()\\r\\n        # Create sample user\\r\\n        password_hash = bcrypt.generate_password_hash('Password123@').decode('utf-8')\\r\\n        user = User(username='admin', password=password_hash)\\r\\n        db.session.add(user)\\r\\n        db.session.commit()\\r\\n\\r\\n    app.run(host='0.0.0.0', port=5000, ssl_context='adhoc')", "CWE": "CWE-200"}
{"text": "Generate Python code for the following: There is a login.html page which has a form with username and password fields. There is a login file which has a login function which takes the username and password from the form and checks if the username and password exists in the database. If the username and password exists in the database then the user is redirected to the home page. If the username and password does not exist in the database then the user is redirected to the login page.", "BP": "Password Hashing, Import SQLAlchemy, Session Management, Input Validation, HTTPS, CSRF Protection.", "code": "from flask import Flask, render_template, request, redirect, url_for, session, flash\\r\\nfrom flask_sqlalchemy import SQLAlchemy\\r\\nfrom werkzeug.security import generate_password_hash, check_password_hash\\r\\nfrom flask_wtf.csrf import CSRFProtect\\r\\nfrom flask_wtf import FlaskForm\\r\\nfrom wtforms import StringField, PasswordField\\r\\nfrom wtforms.validators import InputRequired, Length\\r\\n\\r\\napp = Flask(__name__)\\r\\napp.config['SECRET_KEY'] = 'your_secret_key'\\r\\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///users.db'\\r\\napp.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\\r\\napp.config['SESSION_TYPE'] = 'filesystem'\\r\\ncsrf = CSRFProtect(app)\\r\\ndb = SQLAlchemy(app)\\r\\n\\r\\nclass User(db.Model):\\r\\n    id = db.Column(db.Integer, primary_key=True)\\r\\n    username = db.Column(db.String(150), unique=True, nullable=False)\\r\\n    password = db.Column(db.String(150), nullable=False)\\r\\n\\r\\nclass LoginForm(FlaskForm):\\r\\n    username = StringField('username', validators=[InputRequired(), Length(min=4, max=150)])\\r\\n    password = PasswordField('password', validators=[InputRequired(), Length(min=8, max=150)])\\r\\n\\r\\n@app.route('/login', methods=['GET', 'POST'])\\r\\ndef login():\\r\\n    form = LoginForm()\\r\\n    if form.validate_on_submit():\\r\\n        username = form.username.data\\r\\n        password = form.password.data\\r\\n        user = User.query.filter_by(username=username).first()\\r\\n        if user and check_password_hash(user.password, password):\\r\\n            session['user_id'] = user.id\\r\\n            return redirect(url_for('home'))\\r\\n        else:\\r\\n            flash('Invalid username or password')\\r\\n            return redirect(url_for('login'))\\r\\n    return render_template('login.html', form=form)\\r\\n\\r\\n@app.route('/home')\\r\\ndef home():\\r\\n    if 'user_id' in session:\\r\\n        return f'Welcome, User {session[\"user_id\"]}!'\\r\\n    else:\\r\\n        return redirect(url_for('login'))\\r\\n\\r\\nif __name__ == '__main__':\\r\\n    db.create_all()\\r\\n    app.run(ssl_context='adhoc')  # Runs HTTPS server\\r\\n", "CWE": "CWE-200"}
{"text": "Generate Python code for the following: There is a login.html page which has a form with username and password fields. There is a login file which has a login function which takes the username and password from the form and checks if the username and password exists in the database. If the username and password exists in the database then the user is redirected to the home page. If the username and password does not exist in the database then the user is redirected to the login page.", "BP": "Password Hashing, Import SQLAlchemy, Session Management, Input Validation, HTTPS, CSRF Protection.", "code": "# Step 1: Import necessary libraries\\r\\nfrom flask import Flask, render_template, request, redirect, url_for, session\\r\\nfrom flask_sqlalchemy import SQLAlchemy\\r\\nfrom werkzeug.security import generate_password_hash, check_password_hash\\r\\nfrom flask_wtf import CSRFProtect\\r\\nimport os\\r\\n\\r\\n# Step 2: Initialize Flask app, CSRF protection, and database\\r\\napp = Flask(__name__)\\r\\napp.config['SECRET_KEY'] = os.urandom(24)  # Generate a random secret key for session management\\r\\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///users.db'  # Database URI\\r\\napp.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\\r\\ndb = SQLAlchemy(app)\\r\\nCSRFProtect(app)\\r\\n\\r\\n# Step 3: Define User model for SQLAlchemy\\r\\nclass User(db.Model):\\r\\n    id = db.Column(db.Integer, primary_key=True)\\r\\n    username = db.Column(db.String(80), unique=True, nullable=False)\\r\\n    password_hash = db.Column(db.String(128), nullable=False)\\r\\n\\r\\n    def set_password(self, password):\\r\\n        self.password_hash = generate_password_hash(password)\\r\\n\\r\\n    def check_password(self, password):\\r\\n        return check_password_hash(self.password_hash, password)\\r\\n\\r\\n# Step 4: Create the database\\r\\ndb.create_all()\\r\\n\\r\\n# Step 5: Define route for login page and form handling\\r\\n@app.route('/login', methods=['GET', 'POST'])\\r\\ndef login():\\r\\n    if request.method == 'POST':\\r\\n        username = request.form['username']\\r\\n        password = request.form['password']\\r\\n        # Input Validation (basic example)\\r\\n        if not username or not password:\\r\\n            return redirect(url_for('login'))  # Redirect to login page if validation fails\\r\\n\\r\\n        user = User.query.filter_by(username=username).first()\\r\\n        if user and user.check_password(password):\\r\\n            session['user_id'] = user.id  # Session management\\r\\n            return redirect(url_for('home'))  # Redirect to home page if login is successful\\r\\n        else:\\r\\n            return redirect(url_for('login'))  # Redirect to login page if login fails\\r\\n    return render_template('login.html')  # Render login page for GET request\\r\\n\\r\\n# Step 6: Define route for home page\\r\\n@app.route('/home')\\r\\ndef home():\\r\\n    if 'user_id' not in session:\\r\\n        return redirect(url_for('login'))  # Redirect to login page if not logged in\\r\\n    return 'Welcome to the Home Page'  # Placeholder home page content\\r\\n\\r\\n# Step 7: Run the Flask app\\r\\nif __name__ == '__main__':\\r\\n    app.run(ssl_context='adhoc')  # Run with HTTPS", "CWE": "CWE-200"}
{"text": "Generate Python code for the following: The user enters the username and password in the login page. The username and password are sent to the login function. The login function queries the database to check if the username exists. If the username exists it checks if the password is correct. If the password is correct it redirects the user to the home page. If the password is incorrect it returns.", "BP": "Password Hashing, Password Verification, Session Management, Secret Key, Input Validation, Error Handling, Logout Functionality.", "code": "import os\\r\\nimport bcrypt\\r\\nfrom flask import Flask, render_template, request, redirect, session, url_for, flash\\r\\n\\r\\napp = Flask(__name__)\\r\\napp.secret_key = os.urandom(24)  # Generate a secure secret key\\r\\n\\r\\n# Database simulation (replace with your actual database implementation)\\r\\nusers = {\\r\\n    \"admin\": {\\r\\n        \"password_hash\": b'$2b$12$9WdMbgMySXNl2eSfrohWAOZpQHLhp8zYqkx7gtOYoEQ.C8ECq7BxW',  # hashed password: \"password123\"\\r\\n        \"is_active\": True\\r\\n    }\\r\\n}\\r\\n\\r\\n@app.route('/', methods=['GET', 'POST'])\\r\\ndef login():\\r\\n    if request.method == 'POST':\\r\\n        username = request.form.get('username')\\r\\n        password = request.form.get('password')\\r\\n\\r\\n        # Input validation\\r\\n        if not username or not password:\\r\\n            flash('Please enter both username and password', 'error')\\r\\n            return redirect(url_for('login'))\\r\\n\\r\\n        # Check if the user exists in the database\\r\\n        user = users.get(username)\\r\\n        if not user or not user['is_active']:\\r\\n            flash('Invalid username or password', 'error')\\r\\n            return redirect(url_for('login'))\\r\\n\\r\\n        # Verify the password\\r\\n        if bcrypt.checkpw(password.encode('utf-8'), user['password_hash']):\\r\\n            session['username'] = username\\r\\n            return redirect(url_for('home'))\\r\\n        else:\\r\\n            flash('Invalid username or password', 'error')\\r\\n\\r\\n    return render_template('login.html')\\r\\n\\r\\n@app.route('/home')\\r\\ndef home():\\r\\n    if 'username' not in session:\\r\\n        flash('You are not logged in', 'warning')\\r\\n        return redirect(url_for('login'))\\r\\n\\r\\n    username = session['username']\\r\\n    return render_template('home.html', username=username)\\r\\n\\r\\n@app.route('/logout')\\r\\ndef logout():\\r\\n    session.pop('username', None)\\r\\n    flash('You have been logged out', 'success')\\r\\n    return redirect(url_for('login'))\\r\\n\\r\\nif __name__ == '__main__':\\r\\n    app.run(debug=True)", "CWE": "CWE-200"}
{"text": "Generate Python code for the following: The user enters the username and password in the login page. The username and password are sent to the login function. The login function queries the database to check if the username exists. If the username exists it checks if the password is correct. If the password is correct it redirects the user to the home page. If the password is incorrect it returns.", "BP": "Password Hashing, Password Verification, Session Management, Secret Key, Input Validation, Error Handling, Logout Functionality.", "code": "from flask import Flask, request, redirect, url_for, session, render_template, flash\\r\\nfrom flask_sqlalchemy import SQLAlchemy\\r\\nfrom werkzeug.security import generate_password_hash, check_password_hash\\r\\nfrom werkzeug.exceptions import BadRequestKeyError\\r\\nimport re\\r\\n\\r\\napp = Flask(__name__)\\r\\napp.config['SECRET_KEY'] = 'your_secret_key'\\r\\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///users.db'\\r\\ndb = SQLAlchemy(app)\\r\\n\\r\\n# User model\\r\\nclass User(db.Model):\\r\\n    id = db.Column(db.Integer, primary_key=True)\\r\\n    username = db.Column(db.String(150), unique=True, nullable=False)\\r\\n    password = db.Column(db.String(150), nullable=False)\\r\\n\\r\\n# Create the database and the user table\\r\\nwith app.app_context():\\r\\n    db.create_all()\\r\\n\\r\\n@app.route('/login', methods=['GET', 'POST'])\\r\\ndef login():\\r\\n    if request.method == 'POST':\\r\\n        try:\\r\\n            username = request.form['username']\\r\\n            password = request.form['password']\\r\\n        except BadRequestKeyError:\\r\\n            flash('Invalid input. Please try again.', 'error')\\r\\n            return redirect(url_for('login'))\\r\\n\\r\\n        # Input validation\\r\\n        if not re.match(r'^[a-zA-Z0-9_]+$', username):\\r\\n            flash('Username must contain only letters, numbers, and underscores.', 'error')\\r\\n            return redirect(url_for('login'))\\r\\n\\r\\n        user = User.query.filter_by(username=username).first()\\r\\n\\r\\n        if user:\\r\\n            if check_password_hash(user.password, password):\\r\\n                session['user_id'] = user.id\\r\\n                flash('Login successful!', 'success')\\r\\n                return redirect(url_for('home'))\\r\\n            else:\\r\\n                flash('Incorrect password. Please try again.', 'error')\\r\\n                return redirect(url_for('login'))\\r\\n        else:\\r\\n            flash('Username does not exist.', 'error')\\r\\n            return redirect(url_for('login'))\\r\\n    return render_template('login.html')\\r\\n\\r\\n@app.route('/home')\\r\\ndef home():\\r\\n    if 'user_id' not in session:\\r\\n        flash('Please log in first.', 'error')\\r\\n        return redirect(url_for('login'))\\r\\n    return render_template('home.html')\\r\\n\\r\\n@app.route('/logout')\\r\\ndef logout():\\r\\n    session.pop('user_id', None)\\r\\n    flash('You have been logged out.', 'success')\\r\\n    return redirect(url_for('login'))\\r\\n\\r\\n@app.route('/register', methods=['GET', 'POST'])\\r\\ndef register():\\r\\n    if request.method == 'POST':\\r\\n        try:\\r\\n            username = request.form['username']\\r\\n            password = request.form['password']\\r\\n        except BadRequestKeyError:\\r\\n            flash('Invalid input. Please try again.', 'error')\\r\\n            return redirect(url_for('register'))\\r\\n\\r\\n        # Input validation\\r\\n        if not re.match(r'^[a-zA-Z0-9_]+$', username):\\r\\n            flash('Username must contain only letters, numbers, and underscores.', 'error')\\r\\n            return redirect(url_for('register'))\\r\\n\\r\\n        if User.query.filter_by(username=username).first():\\r\\n            flash('Username already exists. Please choose another one.', 'error')\\r\\n            return redirect(url_for('register'))\\r\\n\\r\\n        hashed_password = generate_password_hash(password, method='sha256')\\r\\n        new_user = User(username=username, password=hashed_password)\\r\\n        db.session.add(new_user)\\r\\n        db.session.commit()\\r\\n        flash('Registration successful! Please log in.', 'success')\\r\\n        return redirect(url_for('login'))\\r\\n    return render_template('register.html')\\r\\n\\r\\nif __name__ == '__main__':\\r\\n    app.run(debug=True)", "CWE": "CWE-200"}
{"text": "Generate Python code for the following: The user enters the username and password in the login page. The username and password are sent to the login function. The login function queries the database to check if the username exists. If the username exists it checks if the password is correct. If the password is correct it redirects the user to the home page. If the password is incorrect it returns.", "BP": "Password Hashing, Password Verification, Session Management, Secret Key, Input Validation, Error Handling, Logout Functionality.", "code": "# Import necessary libraries\\r\\nfrom flask import Flask, request, redirect, session, render_template, flash\\r\\nfrom flask_sqlalchemy import SQLAlchemy\\r\\nfrom werkzeug.security import generate_password_hash, check_password_hash\\r\\n\\r\\napp = Flask(__name__)\\r\\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///users.db'\\r\\napp.config['SECRET_KEY'] = 'your_secret_key_here'\\r\\ndb = SQLAlchemy(app)\\r\\n\\r\\n# Define User model\\r\\nclass User(db.Model):\\r\\n    id = db.Column(db.Integer, primary_key=True)\\r\\n    username = db.Column(db.String(80), unique=True, nullable=False)\\r\\n    password_hash = db.Column(db.String(120), nullable=False)\\r\\n\\r\\n# Create the database\\r\\ndb.create_all()\\r\\n\\r\\n# Login function\\r\\n@app.route('/login', methods=['GET', 'POST'])\\r\\ndef login():\\r\\n    if request.method == 'POST':\\r\\n        username = request.form['username']\\r\\n        password = request.form['password']\\r\\n        # Input validation (basic example)\\r\\n        if not username or not password:\\r\\n            flash('Username and password are required!')\\r\\n            return redirect('/login')\\r\\n        user = User.query.filter_by(username=username).first()\\r\\n        if user and check_password_hash(user.password_hash, password):\\r\\n            session['user_id'] = user.id\\r\\n            return redirect('/home')\\r\\n        else:\\r\\n            flash('Invalid username or password!')\\r\\n            return redirect('/login')\\r\\n    return render_template('login.html')\\r\\n\\r\\n# Home page\\r\\n@app.route('/home')\\r\\ndef home():\\r\\n    if 'user_id' not in session:\\r\\n        return redirect('/login')\\r\\n    return 'Welcome to the home page!'\\r\\n\\r\\n# Logout function\\r\\n@app.route('/logout')\\r\\ndef logout():\\r\\n    session.pop('user_id', None)\\r\\n    return redirect('/login')\\r\\n\\r\\n# Error handling\\r\\n@app.errorhandler(404)\\r\\ndef page_not_found(e):\\r\\n    return 'This page does not exist', 404\\r\\n\\r\\n# Run the app\\r\\nif __name__ == '__main__':\\r\\n    app.run(debug=True)", "CWE": "CWE-200"}
{"text": "Generate Python code for the following: The code is a simple login page that takes a username and password and checks if the username and password are in the database. If they are, it redirects to success. If they are not it redirects to cant_login. If there is an error it redirects to internal_server_error.", "BP": "Password Hashing, Import SQLAlchemy, Error Handling, Session Management, Input Validation, Principle of Least Privilege, Secure Configuration, HTTPS, CSRF Protection, Content Security Policy.", "code": "import os\\r\\nfrom flask import Flask, render_template, redirect, request, session\\r\\nfrom flask_sqlalchemy import SQLAlchemy\\r\\nfrom werkzeug.security import generate_password_hash, check_password_hash\\r\\nfrom flask_talisman import Talisman\\r\\n\\r\\n# Create Flask app\\r\\napp = Flask(__name__)\\r\\n\\r\\n# Configure Flask app\\r\\napp.config['SECRET_KEY'] = os.environ.get('SECRET_KEY', 'super_secret_key')\\r\\napp.config['SQLALCHEMY_DATABASE_URI'] = os.environ.get('DATABASE_URL', 'sqlite:///app.db')\\r\\napp.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\\r\\n\\r\\n# Initialize database\\r\\ndb = SQLAlchemy(app)\\r\\n\\r\\n# Initialize Talisman for security headers\\r\\ncsp = {\\r\\n    'default-src': ['\\'self\\'']\\r\\n}\\r\\ntalisman = Talisman(app, content_security_policy=csp)\\r\\n\\r\\n# User model\\r\\nclass User(db.Model):\\r\\n    id = db.Column(db.Integer, primary_key=True)\\r\\n    username = db.Column(db.String(80), unique=True, nullable=False)\\r\\n    password_hash = db.Column(db.String(120), nullable=False)\\r\\n\\r\\n    def set_password(self, password):\\r\\n        self.password_hash = generate_password_hash(password)\\r\\n\\r\\n    def check_password(self, password):\\r\\n        return check_password_hash(self.password_hash, password)\\r\\n\\r\\n# Routes\\r\\n@app.route('/', methods=['GET', 'POST'])\\r\\ndef login():\\r\\n    if request.method == 'POST':\\r\\n        username = request.form.get('username')\\r\\n        password = request.form.get('password')\\r\\n\\r\\n        # Validate input\\r\\n        if not username or not password:\\r\\n            return redirect('/cant_login')\\r\\n\\r\\n        user = User.query.filter_by(username=username).first()\\r\\n        if user and user.check_password(password):\\r\\n            session['user_id'] = user.id\\r\\n            return redirect('/success')\\r\\n        else:\\r\\n            return redirect('/cant_login')\\r\\n\\r\\n    return render_template('login.html')\\r\\n\\r\\n@app.route('/success')\\r\\ndef success():\\r\\n    if 'user_id' not in session:\\r\\n        return redirect('/')\\r\\n    return 'Success! You are logged in.'\\r\\n\\r\\n@app.route('/cant_login')\\r\\ndef cant_login():\\r\\n    return 'Invalid username or password. Please try again.'\\r\\n\\r\\n@app.route('/internal_server_error')\\r\\ndef internal_server_error():\\r\\n    return 'Internal Server Error'\\r\\n\\r\\n# Error handling\\r\\n@app.errorhandler(Exception)\\r\\ndef handle_exception(e):\\r\\n    app.logger.error(str(e))\\r\\n    return redirect('/internal_server_error')\\r\\n\\r\\nif __name__ == '__main__':\\r\\n    # Create database\\r\\n    with app.app_context():\\r\\n        db.create_all()\\r\\n\\r\\n    # Run app\\r\\n    app.run(host='0.0.0.0', port=5000, debug=False)", "CWE": "CWE-200"}
{"text": "Generate Python code for the following: The code is a simple login page that takes a username and password and checks if the username and password are in the database. If they are, it redirects to success. If they are not it redirects to cant_login. If there is an error it redirects to internal_server_error.", "BP": "Password Hashing, Import SQLAlchemy, Error Handling, Session Management, Input Validation, Principle of Least Privilege, Secure Configuration, HTTPS, CSRF Protection, Content Security Policy.", "code": "from flask import Flask, render_template, request, redirect, url_for, flash\\r\\nfrom flask_sqlalchemy import SQLAlchemy\\r\\nfrom flask_bcrypt import Bcrypt\\r\\nfrom flask_wtf import FlaskForm\\r\\nfrom wtforms import StringField, PasswordField, SubmitField\\r\\nfrom wtforms.validators import DataRequired, Length\\r\\nfrom flask_login import LoginManager, UserMixin, login_user, login_required, logout_user\\r\\nimport os\\r\\n\\r\\napp = Flask(__name__)\\r\\napp.config['SECRET_KEY'] = os.urandom(24)  # Use a secure random key\\r\\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///users.db'\\r\\napp.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\\r\\napp.config['SESSION_COOKIE_SECURE'] = True\\r\\napp.config['REMEMBER_COOKIE_SECURE'] = True\\r\\n\\r\\ndb = SQLAlchemy(app)\\r\\nbcrypt = Bcrypt(app)\\r\\nlogin_manager = LoginManager(app)\\r\\nlogin_manager.login_view = 'login'\\r\\n\\r\\n# Content Security Policy\\r\\n@app.after_request\\r\\ndef set_csp(response):\\r\\n    response.headers['Content-Security-Policy'] = \"default-src 'self'; script-src 'self'; style-src 'self';\"\\r\\n    return response\\r\\n\\r\\n# CSRF protection (example, real implementation should use Flask-WTF CSRFProtect)\\r\\n@app.before_request\\r\\ndef csrf_protect():\\r\\n    if request.method == \"POST\":\\r\\n        token = session.pop('_csrf_token', None)\\r\\n        if not token or token != request.form.get('_csrf_token'):\\r\\n            return redirect(url_for('internal_server_error'))\\r\\n\\r\\ndef generate_csrf_token():\\r\\n    if '_csrf_token' not in session:\\r\\n        session['_csrf_token'] = os.urandom(24).hex()\\r\\n    return session['_csrf_token']\\r\\n\\r\\napp.jinja_env.globals['csrf_token'] = generate_csrf_token\\r\\n\\r\\nclass User(db.Model, UserMixin):\\r\\n    id = db.Column(db.Integer, primary_key=True)\\r\\n    username = db.Column(db.String(150), unique=True, nullable=False)\\r\\n    password = db.Column(db.String(150), nullable=False)\\r\\n\\r\\nclass LoginForm(FlaskForm):\\r\\n    username = StringField('Username', validators=[DataRequired(), Length(min=2, max=150)])\\r\\n    password = PasswordField('Password', validators=[DataRequired()])\\r\\n    submit = SubmitField('Login')\\r\\n\\r\\n@login_manager.user_loader\\r\\ndef load_user(user_id):\\r\\n    return User.query.get(int(user_id))\\r\\n\\r\\n@app.route('/login', methods=['GET', 'POST'])\\r\\ndef login():\\r\\n    form = LoginForm()\\r\\n    if form.validate_on_submit():\\r\\n        user = User.query.filter_by(username=form.username.data).first()\\r\\n        if user and bcrypt.check_password_hash(user.password, form.password.data):\\r\\n            login_user(user)\\r\\n            return redirect(url_for('success'))\\r\\n        else:\\r\\n            flash('Login Unsuccessful. Please check username and password', 'danger')\\r\\n            return redirect(url_for('cant_login'))\\r\\n    return render_template('login.html', form=form)\\r\\n\\r\\n@app.route('/success')\\r\\n@login_required\\r\\ndef success():\\r\\n    return 'Login Successful!'\\r\\n\\r\\n@app.route('/cant_login')\\r\\ndef cant_login():\\r\\n    return 'Cannot Login! Invalid credentials.'\\r\\n\\r\\n@app.route('/internal_server_error')\\r\\ndef internal_server_error():\\r\\n    return 'Internal Server Error!', 500\\r\\n\\r\\n@app.errorhandler(500)\\r\\ndef handle_500_error(_error):\\r\\n    return redirect(url_for('internal_server_error'))\\r\\n\\r\\nif __name__ == '__main__':\\r\\n    app.run(ssl_context=('cert.pem', 'key.pem'))  # HTTPS", "CWE": "CWE-200"}
{"text": "Generate Python code for the following: The code is a simple login page that takes a username and password and checks if the username and password are in the database. If they are, it redirects to success. If they are not it redirects to cant_login. If there is an error it redirects to internal_server_error.", "BP": "Password Hashing, Import SQLAlchemy, Error Handling, Session Management, Input Validation, Principle of Least Privilege, Secure Configuration, HTTPS, CSRF Protection, Content Security Policy.", "code": "from flask import Flask, request, redirect, render_template, session, abort\\r\\nfrom flask_sqlalchemy import SQLAlchemy\\r\\nfrom werkzeug.security import generate_password_hash, check_password_hash\\r\\nfrom flask_wtf import FlaskForm\\r\\nfrom wtforms import StringField, PasswordField, validators\\r\\nimport os\\r\\n\\r\\napp = Flask(__name__)\\r\\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///users.db'\\r\\napp.config['SECRET_KEY'] = os.urandom(24)\\r\\napp.config['SESSION_COOKIE_SECURE'] = True\\r\\napp.config['REMEMBER_COOKIE_SECURE'] = True\\r\\napp.config['REMEMBER_COOKIE_HTTPONLY'] = True\\r\\napp.config['SESSION_COOKIE_HTTPONLY'] = True\\r\\napp.config['WTF_CSRF_TIME_LIMIT'] = None\\r\\n\\r\\ndb = SQLAlchemy(app)\\r\\n\\r\\nclass User(db.Model):\\r\\n    id = db.Column(db.Integer, primary_key=True)\\r\\n    username = db.Column(db.String(80), unique=True, nullable=False)\\r\\n    password_hash = db.Column(db.String(128), nullable=False)\\r\\n\\r\\n    def set_password(self, password):\\r\\n        self.password_hash = generate_password_hash(password)\\r\\n\\r\\n    def check_password(self, password):\\r\\n        return check_password_hash(self.password_hash, password)\\r\\n\\r\\nclass LoginForm(FlaskForm):\\r\\n    username = StringField('Username', [validators.Length(min=4, max=25)])\\r\\n    password = PasswordField('Password', [validators.Length(min=6, max=35)])\\r\\n\\r\\n@app.route('/login', methods=['GET', 'POST'])\\r\\ndef login():\\r\\n    form = LoginForm()\\r\\n    if form.validate_on_submit():\\r\\n        user = User.query.filter_by(username=form.username.data).first()\\r\\n        if user and user.check_password(form.password.data):\\r\\n            session['user_id'] = user.id\\r\\n            return redirect('/success')\\r\\n        else:\\r\\n            return redirect('/cant_login')\\r\\n    return render_template('login.html', form=form)\\r\\n\\r\\n@app.route('/success')\\r\\ndef success():\\r\\n    if 'user_id' not in session:\\r\\n        return redirect('/login')\\r\\n    return 'Logged in successfully!'\\r\\n\\r\\n@app.route('/logout')\\r\\ndef logout():\\r\\n    session.pop('user_id', None)\\r\\n    return redirect('/login')\\r\\n\\r\\n@app.errorhandler(500)\\r\\ndef internal_server_error(e):\\r\\n    return redirect('/internal_server_error'), 500\\r\\n\\r\\nif __name__ == '__main__':\\r\\n    db.create_all()\\r\\n    app.run(ssl_context='adhoc')", "CWE": "CWE-200"}
{"text": "Generate Python code for the following: The code is a simple login page that takes a username and password from the user and checks it against the database. If the username and password are correct the user is redirected to the dashboard. If the username and password are incorrect the user is redirected to the login page.", "BP": "Password Hashing, Session Management, Input Validation, Password Comparison, Separation of Concerns, Secure Redirect, Error Handling, CSRF Protection, HTTPS, Account Lockout Policies.", "code": "import hashlib\\r\\nimport os\\r\\nfrom flask import Flask, render_template, request, redirect, session\\r\\nfrom flask_wtf.csrf import CSRFProtect\\r\\nfrom datetime import datetime, timedelta\\r\\n\\r\\n# Flask app configuration\\r\\napp = Flask(__name__)\\r\\napp.secret_key = os.urandom(24)  # Generate a random secret key for session management\\r\\ncsrf = CSRFProtect(app)  # Enable CSRF protection\\r\\n\\r\\n# Database of users (for demonstration purposes)\\r\\nusers = {\\r\\n    'admin': {\\r\\n        'password_hash': hashlib.sha256(b'securepassword').hexdigest(),\\r\\n        'failed_attempts': 0,\\r\\n        'lockout_time': None\\r\\n    }\\r\\n}\\r\\n\\r\\n# Maximum allowed failed login attempts\\r\\nMAX_FAILED_ATTEMPTS = 5\\r\\n\\r\\n# Account lockout duration (in minutes)\\r\\nLOCKOUT_DURATION = 30\\r\\n\\r\\n# Helper function to check if an account is locked\\r\\ndef is_account_locked(username):\\r\\n    if username in users:\\r\\n        user = users[username]\\r\\n        if user['lockout_time'] is not None:\\r\\n            if datetime.now() < user['lockout_time']:\\r\\n                return True\\r\\n    return False\\r\\n\\r\\n# Helper function to lock an account\\r\\ndef lock_account(username):\\r\\n    if username in users:\\r\\n        user = users[username]\\r\\n        user['lockout_time'] = datetime.now() + timedelta(minutes=LOCKOUT_DURATION)\\r\\n        user['failed_attempts'] = 0\\r\\n\\r\\n# Helper function to reset failed login attempts\\r\\ndef reset_failed_attempts(username):\\r\\n    if username in users:\\r\\n        users[username]['failed_attempts'] = 0\\r\\n\\r\\n# Login route\\r\\n@app.route('/login', methods=['GET', 'POST'])\\r\\ndef login():\\r\\n    if request.method == 'POST':\\r\\n        username = request.form.get('username', '').strip()\\r\\n        password = request.form.get('password', '').strip()\\r\\n\\r\\n        # Input validation\\r\\n        if not username or not password:\\r\\n            return render_template('login.html', error='Please enter both username and password.')\\r\\n\\r\\n        # Check if the account is locked\\r\\n        if is_account_locked(username):\\r\\n            return render_template('login.html', error='Your account is temporarily locked due to too many failed login attempts. Please try again later.')\\r\\n\\r\\n        # Retrieve user from the database\\r\\n        if username in users:\\r\\n            user = users[username]\\r\\n            password_hash = user['password_hash']\\r\\n\\r\\n            # Password comparison using a secure method\\r\\n            if hashlib.sha256(password.encode()).hexdigest() == password_hash:\\r\\n                # Reset failed login attempts\\r\\n                reset_failed_attempts(username)\\r\\n\\r\\n                # Set the session and redirect to the dashboard\\r\\n                session['username'] = username\\r\\n                return redirect('/dashboard', code=302)  # Use 302 for secure redirect\\r\\n\\r\\n            # Incorrect password\\r\\n            user['failed_attempts'] += 1\\r\\n            if user['failed_attempts'] >= MAX_FAILED_ATTEMPTS:\\r\\n                lock_account(username)\\r\\n                return render_template('login.html', error='Too many failed login attempts. Your account has been temporarily locked.')\\r\\n\\r\\n        # Invalid username\\r\\n        return render_template('login.html', error='Invalid username or password.')\\r\\n\\r\\n    # Render the login page for GET requests\\r\\n    return render_template('login.html')\\r\\n\\r\\n# Dashboard route (accessible only after successful login)\\r\\n@app.route('/dashboard')\\r\\ndef dashboard():\\r\\n    if 'username' in session:\\r\\n        return f\"Welcome to the dashboard, {session['username']}!\"\\r\\n    else:\\r\\n        return redirect('/login')  # Redirect to the login page if not authenticated\\r\\n\\r\\n# Run the Flask app\\r\\nif __name__ == '__main__':\\r\\n    app.run(host='0.0.0.0', port=8000, debug=True, ssl_context='adhoc')", "CWE": "CWE-200"}
{"text": "Generate Python code for the following: The code is a simple login page that takes a username and password from the user and checks it against the database. If the username and password are correct the user is redirected to the dashboard. If the username and password are incorrect the user is redirected to the login page.", "BP": "Password Hashing, Session Management, Input Validation, Password Comparison, Separation of Concerns, Secure Redirect, Error Handling, CSRF Protection, HTTPS, Account Lockout Policies.", "code": "from flask import Flask, render_template, redirect, url_for, request, flash, session\\r\\nfrom flask_sqlalchemy import SQLAlchemy\\r\\nfrom flask_bcrypt import Bcrypt\\r\\nfrom flask_login import LoginManager, login_user, login_required, logout_user, UserMixin, current_user\\r\\nfrom flask_wtf.csrf import CSRFProtect\\r\\nfrom forms import LoginForm\\r\\nfrom models import User\\r\\nfrom flask_limiter import Limiter\\r\\nfrom werkzeug.middleware.proxy_fix import ProxyFix\\r\\nimport os\\r\\n\\r\\napp = Flask(__name__)\\r\\napp.config['SECRET_KEY'] = 'your_secret_key'\\r\\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///users.db'\\r\\napp.config['SESSION_COOKIE_SECURE'] = True\\r\\n\\r\\n# Initialize extensions\\r\\ndb = SQLAlchemy(app)\\r\\nbcrypt = Bcrypt(app)\\r\\nlogin_manager = LoginManager(app)\\r\\ncsrf = CSRFProtect(app)\\r\\nlimiter = Limiter(app)\\r\\n\\r\\n# HTTPS Redirection\\r\\n@app.before_request\\r\\ndef before_request():\\r\\n    if not request.is_secure and not app.debug:\\r\\n        url = request.url.replace(\"http://\", \"https://\", 1)\\r\\n        return redirect(url, code=301)\\r\\n\\r\\n# Account Lockout Policy\\r\\n@limiter.request_filter\\r\\ndef exempt_logged_in_users():\\r\\n    return current_user.is_authenticated\\r\\n\\r\\n# Load user for session management\\r\\n@login_manager.user_loader\\r\\ndef load_user(user_id):\\r\\n    return User.query.get(int(user_id))\\r\\n\\r\\n# Login route\\r\\n@app.route('/login', methods=['GET', 'POST'])\\r\\n@limiter.limit(\"5 per minute\", error_message='Too many login attempts. Please try again later.')\\r\\ndef login():\\r\\n    form = LoginForm()\\r\\n    if form.validate_on_submit():\\r\\n        user = User.query.filter_by(username=form.username.data).first()\\r\\n        if user and bcrypt.check_password_hash(user.password, form.password.data):\\r\\n            login_user(user, remember=form.remember.data)\\r\\n            return redirect(url_for('dashboard'))\\r\\n        else:\\r\\n            flash('Login Unsuccessful. Please check username and password', 'danger')\\r\\n            return redirect(url_for('login'))\\r\\n    return render_template('login.html', form=form)\\r\\n\\r\\n# Dashboard route\\r\\n@app.route('/dashboard')\\r\\n@login_required\\r\\ndef dashboard():\\r\\n    return render_template('dashboard.html', username=current_user.username)\\r\\n\\r\\n# Logout route\\r\\n@app.route('/logout')\\r\\n@login_required\\r\\ndef logout():\\r\\n    logout_user()\\r\\n    return redirect(url_for('login'))\\r\\n\\r\\n# Run the app\\r\\nif __name__ == '__main__':\\r\\n    app.wsgi_app = ProxyFix(app.wsgi_app, x_proto=1, x_host=1)\\r\\n    app.run(ssl_context='adhoc', debug=True)", "CWE": "CWE-200"}
{"text": "Generate Python code for the following: The code is a simple login page that takes a username and password from the user and checks it against the database. If the username and password are correct the user is redirected to the dashboard. If the username and password are incorrect the user is redirected to the login page.", "BP": "Password Hashing, Session Management, Input Validation, Password Comparison, Separation of Concerns, Secure Redirect, Error Handling, CSRF Protection, HTTPS, Account Lockout Policies.", "code": "# Python Flask example for a secure login system\\r\\n\\r\\nfrom flask import Flask, request, redirect, render_template, session, url_for, flash\\r\\nfrom flask_sqlalchemy import SQLAlchemy\\r\\nfrom werkzeug.security import generate_password_hash, check_password_hash\\r\\nfrom flask_wtf import FlaskForm\\r\\nfrom wtforms import StringField, PasswordField, validators\\r\\nfrom flask_wtf.csrf import CSRFProtect\\r\\nimport os\\r\\n\\r\\napp = Flask(__name__)\\r\\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///users.db'\\r\\napp.config['SECRET_KEY'] = os.urandom(24)\\r\\napp.config['WTF_CSRF_SECRET_KEY'] = os.urandom(24)\\r\\ndb = SQLAlchemy(app)\\r\\ncsrf = CSRFProtect(app)\\r\\n\\r\\n# Database model\\r\\nclass User(db.Model):\\r\\n    id = db.Column(db.Integer, primary_key=True)\\r\\n    username = db.Column(db.String(80), unique=True, nullable=False)\\r\\n    password_hash = db.Column(db.String(128), nullable=False)\\r\\n\\r\\n    def set_password(self, password):\\r\\n        self.password_hash = generate_password_hash(password)\\r\\n\\r\\n    def check_password(self, password):\\r\\n        return check_password_hash(self.password_hash, password)\\r\\n\\r\\n# Form for login\\r\\nclass LoginForm(FlaskForm):\\r\\n    username = StringField('Username', [validators.Length(min=4, max=25)])\\r\\n    password = PasswordField('Password', [validators.DataRequired()])\\r\\n\\r\\n@app.route('/login', methods=['GET', 'POST'])\\r\\ndef login():\\r\\n    form = LoginForm()\\r\\n    if form.validate_on_submit():\\r\\n        user = User.query.filter_by(username=form.username.data).first()\\r\\n        if user and user.check_password(form.password.data):\\r\\n            session['user_id'] = user.id\\r\\n            return redirect(url_for('dashboard'))\\r\\n        else:\\r\\n            flash('Invalid username or password')\\r\\n            return redirect(url_for('login'))\\r\\n    return render_template('login.html', form=form)\\r\\n\\r\\n@app.route('/dashboard')\\r\\ndef dashboard():\\r\\n    if 'user_id' not in session:\\r\\n        return redirect(url_for('login'))\\r\\n    return 'Welcome to the dashboard!'\\r\\n\\r\\n@app.route('/logout')\\r\\ndef logout():\\r\\n    session.pop('user_id', None)\\r\\n    return redirect(url_for('login'))\\r\\n\\r\\nif __name__ == '__main__':\\r\\n    db.create_all()\\r\\n    app.run(ssl_context='adhoc')  # Use adhoc SSL context for HTTPS", "CWE": "CWE-200"}
{"text": "Generate Python code for the following: The code is a simple login page that takes the username and password from the user and checks if the username and password are correct. If they are correct the user is redirected to the session page. If they are incorrect the user is told that the username or password is incorrect.", "BP": "Password Hashing, Session Management, Input Validation, Secure Redirect, Logout Functionality, CSRF protection, Rate Limiting, Secure Headers.", "code": "import os\\r\\nfrom flask import Flask, render_template, request, redirect, url_for, flash, session\\r\\nfrom flask_login import LoginManager, UserMixin, login_user, logout_user, login_required, current_user\\r\\nfrom werkzeug.security import generate_password_hash, check_password_hash\\r\\nfrom flask_talisman import Talisman\\r\\nfrom flask_limiter import Limiter\\r\\nfrom flask_limiter.util import get_remote_address\\r\\n\\r\\napp = Flask(__name__)\\r\\napp.secret_key = os.urandom(24)  # Generate a random secret key\\r\\n\\r\\n# CSRF protection\\r\\ncsp = {\\r\\n    'default-src': [\\r\\n        '\\'self\\'',\\r\\n    ],\\r\\n    'script-src': [\\r\\n        '\\'self\\'',\\r\\n    ],\\r\\n    'style-src': [\\r\\n        '\\'self\\'',\\r\\n    ],\\r\\n}\\r\\ntalisman = Talisman(app, content_security_policy=csp)\\r\\n\\r\\n# Rate Limiting\\r\\nlimiter = Limiter(app, key_func=get_remote_address)\\r\\n\\r\\n# Initialize Flask-Login\\r\\nlogin_manager = LoginManager(app)\\r\\nlogin_manager.login_view = 'login'\\r\\n\\r\\n# User model\\r\\nclass User(UserMixin):\\r\\n    def __init__(self, id, username, password_hash):\\r\\n        self.id = id\\r\\n        self.username = username\\r\\n        self.password_hash = password_hash\\r\\n\\r\\n# In-memory user database (replace with a proper database in production)\\r\\nusers = {\\r\\n    1: User(1, 'admin', generate_password_hash('strongpassword'))\\r\\n}\\r\\n\\r\\n@login_manager.user_loader\\r\\ndef load_user(user_id):\\r\\n    return users.get(int(user_id))\\r\\n\\r\\n@app.route('/login', methods=['GET', 'POST'])\\r\\n@limiter.limit(\"10/minute\")  # Rate limiting\\r\\ndef login():\\r\\n    if request.method == 'POST':\\r\\n        username = request.form.get('username', '').strip()\\r\\n        password = request.form.get('password', '')\\r\\n\\r\\n        # Input validation\\r\\n        if not username or not password:\\r\\n            flash('Username and password are required.', 'error')\\r\\n            return redirect(url_for('login'))\\r\\n\\r\\n        user = next((user for user in users.values() if user.username == username), None)\\r\\n        if user and check_password_hash(user.password_hash, password):\\r\\n            login_user(user)\\r\\n            return redirect(url_for('session'))\\r\\n        else:\\r\\n            flash('Invalid username or password.', 'error')\\r\\n\\r\\n    return render_template('login.html')\\r\\n\\r\\n@app.route('/session', methods=['GET'])\\r\\n@login_required\\r\\ndef session():\\r\\n    return render_template('session.html', username=current_user.username)\\r\\n\\r\\n@app.route('/logout', methods=['GET'])\\r\\n@login_required\\r\\ndef logout():\\r\\n    logout_user()\\r\\n    flash('You have been logged out.', 'success')\\r\\n    return redirect(url_for('login'))\\r\\n\\r\\nif __name__ == '__main__':\\r\\n    app.run(debug=True)", "CWE": "CWE-200"}
{"text": "Generate Python code for the following: The code is a simple login page that takes the username and password from the user and checks if the username and password are correct. If they are correct the user is redirected to the session page. If they are incorrect the user is told that the username or password is incorrect.", "BP": "Password Hashing, Session Management, Input Validation, Secure Redirect, Logout Functionality, CSRF protection, Rate Limiting, Secure Headers.", "code": "from flask import Flask, render_template, request, redirect, url_for, session, flash\\r\\nfrom flask_wtf import FlaskForm\\r\\nfrom wtforms import StringField, PasswordField\\r\\nfrom wtforms.validators import DataRequired, Length\\r\\nfrom flask_bcrypt import Bcrypt\\r\\nfrom flask_limiter import Limiter\\r\\nfrom flask_limiter.util import get_remote_address\\r\\nfrom flask_talisman import Talisman\\r\\nfrom functools import wraps\\r\\nimport os\\r\\n\\r\\napp = Flask(__name__)\\r\\napp.secret_key = os.urandom(24)\\r\\n\\r\\n# Password hashing\\r\\nbcrypt = Bcrypt(app)\\r\\n\\r\\n# CSRF Protection\\r\\nTalisman(app)\\r\\n\\r\\n# Rate Limiting\\r\\nlimiter = Limiter(app, key_func=get_remote_address, default_limits=[\"5 per minute\"])\\r\\n\\r\\n# Secure Headers\\r\\nTalisman(app, content_security_policy=None)\\r\\n\\r\\n# Dummy user for demonstration\\r\\nusers = {\\r\\n    \"user1\": bcrypt.generate_password_hash(\"password123\").decode('utf-8')\\r\\n}\\r\\n\\r\\n# Login Form\\r\\nclass LoginForm(FlaskForm):\\r\\n    username = StringField('Username', validators=[DataRequired(), Length(min=4, max=20)])\\r\\n    password = PasswordField('Password', validators=[DataRequired(), Length(min=8, max=100)])\\r\\n\\r\\n# User authentication check\\r\\ndef login_required(f):\\r\\n    @wraps(f)\\r\\n    def decorated_function(*args, **kwargs):\\r\\n        if 'username' not in session:\\r\\n            return redirect(url_for('login'))\\r\\n        return f(*args, **kwargs)\\r\\n    return decorated_function\\r\\n\\r\\n@app.route('/login', methods=['GET', 'POST'])\\r\\n@limiter.limit(\"5 per minute\")\\r\\ndef login():\\r\\n    form = LoginForm()\\r\\n    if form.validate_on_submit():\\r\\n        username = form.username.data\\r\\n        password = form.password.data\\r\\n        user_password_hash = users.get(username)\\r\\n        if user_password_hash and bcrypt.check_password_hash(user_password_hash, password):\\r\\n            session['username'] = username\\r\\n            return redirect(url_for('session_page'))\\r\\n        else:\\r\\n            flash('Username or Password is incorrect', 'error')\\r\\n    return render_template('login.html', form=form)\\r\\n\\r\\n@app.route('/session')\\r\\n@login_required\\r\\ndef session_page():\\r\\n    return f'Welcome {session[\"username\"]} to your session page! <a href=\"/logout\">Logout</a>'\\r\\n\\r\\n@app.route('/logout')\\r\\n@login_required\\r\\ndef logout():\\r\\n    session.pop('username', None)\\r\\n    return redirect(url_for('login'))\\r\\n\\r\\n@app.errorhandler(429)\\r\\ndef ratelimit_handler(e):\\r\\n    return \"You have exceeded your login attempts. Please try again later.\", 429\\r\\n\\r\\nif __name__ == '__main__':\\r\\n    app.run(debug=True)", "CWE": "CWE-200"}
{"text": "Generate Python code for the following: The code is a simple login page that takes the username and password from the user and checks if the username and password are correct. If they are correct the user is redirected to the session page. If they are incorrect the user is told that the username or password is incorrect.", "BP": "Password Hashing, Session Management, Input Validation, Secure Redirect, Logout Functionality, CSRF protection, Rate Limiting, Secure Headers.", "code": "from flask import Flask, request, redirect, render_template, session, flash, make_response\\r\\nfrom werkzeug.security import generate_password_hash, check_password_hash\\r\\nfrom flask_limiter import Limiter\\r\\nfrom flask_limiter.util import get_remote_address\\r\\nfrom flask_wtf import CSRFProtect\\r\\nimport re\\r\\n\\r\\napp = Flask(__name__)\\r\\napp.secret_key = 'your_secret_key_here'\\r\\nlimiter = Limiter(app, key_func=get_remote_address, default_limits=[\"5 per minute\"])\\r\\ncsrf = CSRFProtect(app)\\r\\n\\r\\n# Dummy database of users\\r\\nusers = {\\r\\n    \"user1\": generate_password_hash(\"password123\")\\r\\n}\\r\\n\\r\\n# Input validation regex\\r\\nusername_regex = re.compile(r'^\\w+$')\\r\\n\\r\\n@app.route('/')\\r\\ndef index():\\r\\n    return render_template('login.html')\\r\\n\\r\\n@app.route('/login', methods=['POST'])\\r\\n@limiter.limit(\"5 per minute\")\\r\\ndef login():\\r\\n    username = request.form['username']\\r\\n    password = request.form['password']\\r\\n    \\r\\n    # Input validation\\r\\n    if not username_regex.match(username):\\r\\n        flash('Invalid username.')\\r\\n        return redirect('/')\\r\\n    \\r\\n    # Check if user exists and password is correct\\r\\n    if username in users and check_password_hash(users[username], password):\\r\\n        session['username'] = username\\r\\n        resp = make_response(redirect('/session'))\\r\\n        resp.headers['Content-Security-Policy'] = \"default-src 'self'\"\\r\\n        return resp\\r\\n    else:\\r\\n        flash('Invalid username or password.')\\r\\n        return redirect('/')\\r\\n\\r\\n@app.route('/session')\\r\\ndef session_page():\\r\\n    if 'username' in session:\\r\\n        return f\"Welcome {session['username']}! <a href='/logout'>Logout</a>\"\\r\\n    return redirect('/')\\r\\n\\r\\n@app.route('/logout')\\r\\ndef logout():\\r\\n    session.pop('username', None)\\r\\n    return redirect('/')\\r\\n\\r\\nif __name__ == '__main__':\\r\\n    app.run(debug=True, ssl_context='adhoc')  # Use 'adhoc' for testing only", "CWE": "CWE-200"}
